/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Bess.IO.Rest.Nexus3.Client;
using Bess.IO.Rest.Nexus3.Model;

namespace Bess.IO.Rest.Nexus3.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityCertificatesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a certificate to the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The certificate to add encoded in PEM format (optional)</param>
        /// <returns>ApiCertificate</returns>
        ApiCertificate AddCertificate (string body = null);

        /// <summary>
        /// Add a certificate to the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The certificate to add encoded in PEM format (optional)</param>
        /// <returns>ApiResponse of ApiCertificate</returns>
        ApiResponse<ApiCertificate> AddCertificateWithHttpInfo (string body = null);
        /// <summary>
        /// Retrieve a list of certificates added to the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiCertificate&gt;</returns>
        List<ApiCertificate> GetTrustStoreCertificates ();

        /// <summary>
        /// Retrieve a list of certificates added to the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiCertificate&gt;</returns>
        ApiResponse<List<ApiCertificate>> GetTrustStoreCertificatesWithHttpInfo ();
        /// <summary>
        /// Remove a certificate in the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the certificate that should be removed.</param>
        /// <returns></returns>
        void RemoveCertificate (string id);

        /// <summary>
        /// Remove a certificate in the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the certificate that should be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveCertificateWithHttpInfo (string id);
        /// <summary>
        /// Helper method to retrieve certificate details from a remote system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The remote system&#39;s host name</param>
        /// <param name="port">The port on the remote system to connect to (optional, default to 443)</param>
        /// <param name="protocolHint">An optional hint of the protocol to try for the connection (optional)</param>
        /// <returns>ApiCertificate</returns>
        ApiCertificate RetrieveCertificate (string host, int? port = null, string protocolHint = null);

        /// <summary>
        /// Helper method to retrieve certificate details from a remote system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The remote system&#39;s host name</param>
        /// <param name="port">The port on the remote system to connect to (optional, default to 443)</param>
        /// <param name="protocolHint">An optional hint of the protocol to try for the connection (optional)</param>
        /// <returns>ApiResponse of ApiCertificate</returns>
        ApiResponse<ApiCertificate> RetrieveCertificateWithHttpInfo (string host, int? port = null, string protocolHint = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a certificate to the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The certificate to add encoded in PEM format (optional)</param>
        /// <returns>Task of ApiCertificate</returns>
        System.Threading.Tasks.Task<ApiCertificate> AddCertificateAsync (string body = null);

        /// <summary>
        /// Add a certificate to the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The certificate to add encoded in PEM format (optional)</param>
        /// <returns>Task of ApiResponse (ApiCertificate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCertificate>> AddCertificateAsyncWithHttpInfo (string body = null);
        /// <summary>
        /// Retrieve a list of certificates added to the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiCertificate&gt;</returns>
        System.Threading.Tasks.Task<List<ApiCertificate>> GetTrustStoreCertificatesAsync ();

        /// <summary>
        /// Retrieve a list of certificates added to the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiCertificate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiCertificate>>> GetTrustStoreCertificatesAsyncWithHttpInfo ();
        /// <summary>
        /// Remove a certificate in the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the certificate that should be removed.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveCertificateAsync (string id);

        /// <summary>
        /// Remove a certificate in the trust store.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the certificate that should be removed.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCertificateAsyncWithHttpInfo (string id);
        /// <summary>
        /// Helper method to retrieve certificate details from a remote system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The remote system&#39;s host name</param>
        /// <param name="port">The port on the remote system to connect to (optional, default to 443)</param>
        /// <param name="protocolHint">An optional hint of the protocol to try for the connection (optional)</param>
        /// <returns>Task of ApiCertificate</returns>
        System.Threading.Tasks.Task<ApiCertificate> RetrieveCertificateAsync (string host, int? port = null, string protocolHint = null);

        /// <summary>
        /// Helper method to retrieve certificate details from a remote system.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The remote system&#39;s host name</param>
        /// <param name="port">The port on the remote system to connect to (optional, default to 443)</param>
        /// <param name="protocolHint">An optional hint of the protocol to try for the connection (optional)</param>
        /// <returns>Task of ApiResponse (ApiCertificate)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCertificate>> RetrieveCertificateAsyncWithHttpInfo (string host, int? port = null, string protocolHint = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurityCertificatesApi : ISecurityCertificatesApi
    {
        private Bess.IO.Rest.Nexus3.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityCertificatesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityCertificatesApi(String basePath)
        {
            this.Configuration = new Bess.IO.Rest.Nexus3.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Bess.IO.Rest.Nexus3.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityCertificatesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurityCertificatesApi(Bess.IO.Rest.Nexus3.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Bess.IO.Rest.Nexus3.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Bess.IO.Rest.Nexus3.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bess.IO.Rest.Nexus3.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bess.IO.Rest.Nexus3.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a certificate to the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The certificate to add encoded in PEM format (optional)</param>
        /// <returns>ApiCertificate</returns>
        public ApiCertificate AddCertificate (string body = null)
        {
             ApiResponse<ApiCertificate> localVarResponse = AddCertificateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a certificate to the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The certificate to add encoded in PEM format (optional)</param>
        /// <returns>ApiResponse of ApiCertificate</returns>
        public ApiResponse< ApiCertificate > AddCertificateWithHttpInfo (string body = null)
        {

            var localVarPath = "./v1/security/ssl/truststore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCertificate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiCertificate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCertificate)));
        }

        /// <summary>
        /// Add a certificate to the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The certificate to add encoded in PEM format (optional)</param>
        /// <returns>Task of ApiCertificate</returns>
        public async System.Threading.Tasks.Task<ApiCertificate> AddCertificateAsync (string body = null)
        {
             ApiResponse<ApiCertificate> localVarResponse = await AddCertificateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a certificate to the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The certificate to add encoded in PEM format (optional)</param>
        /// <returns>Task of ApiResponse (ApiCertificate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiCertificate>> AddCertificateAsyncWithHttpInfo (string body = null)
        {

            var localVarPath = "./v1/security/ssl/truststore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCertificate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiCertificate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCertificate)));
        }

        /// <summary>
        /// Retrieve a list of certificates added to the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiCertificate&gt;</returns>
        public List<ApiCertificate> GetTrustStoreCertificates ()
        {
             ApiResponse<List<ApiCertificate>> localVarResponse = GetTrustStoreCertificatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of certificates added to the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiCertificate&gt;</returns>
        public ApiResponse< List<ApiCertificate> > GetTrustStoreCertificatesWithHttpInfo ()
        {

            var localVarPath = "./v1/security/ssl/truststore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrustStoreCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiCertificate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ApiCertificate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiCertificate>)));
        }

        /// <summary>
        /// Retrieve a list of certificates added to the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiCertificate&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiCertificate>> GetTrustStoreCertificatesAsync ()
        {
             ApiResponse<List<ApiCertificate>> localVarResponse = await GetTrustStoreCertificatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of certificates added to the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiCertificate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApiCertificate>>> GetTrustStoreCertificatesAsyncWithHttpInfo ()
        {

            var localVarPath = "./v1/security/ssl/truststore";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTrustStoreCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiCertificate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<ApiCertificate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiCertificate>)));
        }

        /// <summary>
        /// Remove a certificate in the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the certificate that should be removed.</param>
        /// <returns></returns>
        public void RemoveCertificate (string id)
        {
             RemoveCertificateWithHttpInfo(id);
        }

        /// <summary>
        /// Remove a certificate in the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the certificate that should be removed.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveCertificateWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SecurityCertificatesApi->RemoveCertificate");

            var localVarPath = "./v1/security/ssl/truststore/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a certificate in the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the certificate that should be removed.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveCertificateAsync (string id)
        {
             await RemoveCertificateAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Remove a certificate in the trust store. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the certificate that should be removed.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCertificateAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SecurityCertificatesApi->RemoveCertificate");

            var localVarPath = "./v1/security/ssl/truststore/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Helper method to retrieve certificate details from a remote system. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The remote system&#39;s host name</param>
        /// <param name="port">The port on the remote system to connect to (optional, default to 443)</param>
        /// <param name="protocolHint">An optional hint of the protocol to try for the connection (optional)</param>
        /// <returns>ApiCertificate</returns>
        public ApiCertificate RetrieveCertificate (string host, int? port = null, string protocolHint = null)
        {
             ApiResponse<ApiCertificate> localVarResponse = RetrieveCertificateWithHttpInfo(host, port, protocolHint);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Helper method to retrieve certificate details from a remote system. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The remote system&#39;s host name</param>
        /// <param name="port">The port on the remote system to connect to (optional, default to 443)</param>
        /// <param name="protocolHint">An optional hint of the protocol to try for the connection (optional)</param>
        /// <returns>ApiResponse of ApiCertificate</returns>
        public ApiResponse< ApiCertificate > RetrieveCertificateWithHttpInfo (string host, int? port = null, string protocolHint = null)
        {
            // verify the required parameter 'host' is set
            if (host == null)
                throw new ApiException(400, "Missing required parameter 'host' when calling SecurityCertificatesApi->RetrieveCertificate");

            var localVarPath = "./v1/security/ssl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (host != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host", host)); // query parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter
            if (protocolHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocolHint", protocolHint)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCertificate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiCertificate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCertificate)));
        }

        /// <summary>
        /// Helper method to retrieve certificate details from a remote system. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The remote system&#39;s host name</param>
        /// <param name="port">The port on the remote system to connect to (optional, default to 443)</param>
        /// <param name="protocolHint">An optional hint of the protocol to try for the connection (optional)</param>
        /// <returns>Task of ApiCertificate</returns>
        public async System.Threading.Tasks.Task<ApiCertificate> RetrieveCertificateAsync (string host, int? port = null, string protocolHint = null)
        {
             ApiResponse<ApiCertificate> localVarResponse = await RetrieveCertificateAsyncWithHttpInfo(host, port, protocolHint);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Helper method to retrieve certificate details from a remote system. 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host">The remote system&#39;s host name</param>
        /// <param name="port">The port on the remote system to connect to (optional, default to 443)</param>
        /// <param name="protocolHint">An optional hint of the protocol to try for the connection (optional)</param>
        /// <returns>Task of ApiResponse (ApiCertificate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiCertificate>> RetrieveCertificateAsyncWithHttpInfo (string host, int? port = null, string protocolHint = null)
        {
            // verify the required parameter 'host' is set
            if (host == null)
                throw new ApiException(400, "Missing required parameter 'host' when calling SecurityCertificatesApi->RetrieveCertificate");

            var localVarPath = "./v1/security/ssl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (host != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host", host)); // query parameter
            if (port != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "port", port)); // query parameter
            if (protocolHint != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protocolHint", protocolHint)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiCertificate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ApiCertificate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiCertificate)));
        }

    }
}
