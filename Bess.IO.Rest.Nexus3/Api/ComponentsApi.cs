/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Bess.IO.Rest.Nexus3.Client;
using Bess.IO.Rest.Nexus3.Model;

namespace Bess.IO.Rest.Nexus3.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComponentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to delete</param>
        /// <returns></returns>
        void DeleteComponent (string id);

        /// <summary>
        /// Delete a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteComponentWithHttpInfo (string id);
        /// <summary>
        /// Get a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to retrieve</param>
        /// <returns>ComponentXO</returns>
        ComponentXO GetComponentById (string id);

        /// <summary>
        /// Get a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to retrieve</param>
        /// <returns>ApiResponse of ComponentXO</returns>
        ApiResponse<ComponentXO> GetComponentByIdWithHttpInfo (string id);
        /// <summary>
        /// List components
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Repository from which you would like to retrieve components</param>
        /// <param name="continuationToken">A token returned by a prior request. If present, the next page of results are returned (optional)</param>
        /// <returns>PageComponentXO</returns>
        PageComponentXO GetComponents (string repository, string continuationToken = null);

        /// <summary>
        /// List components
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Repository from which you would like to retrieve components</param>
        /// <param name="continuationToken">A token returned by a prior request. If present, the next page of results are returned (optional)</param>
        /// <returns>ApiResponse of PageComponentXO</returns>
        ApiResponse<PageComponentXO> GetComponentsWithHttpInfo (string repository, string continuationToken = null);
        /// <summary>
        /// Upload a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Name of the repository to which you would like to upload the component</param>
        /// <param name="rAsset">r Asset  (optional)</param>
        /// <param name="rAssetPathId">r Asset  Package Path (optional)</param>
        /// <param name="aptAsset">apt Asset  (optional)</param>
        /// <param name="yumDirectory">yum Directory (optional)</param>
        /// <param name="yumAsset">yum Asset  (optional)</param>
        /// <param name="yumAssetFilename">yum Asset  Filename (optional)</param>
        /// <param name="dockerAsset">docker Asset  (optional)</param>
        /// <param name="rubygemsAsset">rubygems Asset  (optional)</param>
        /// <param name="nugetAsset">nuget Asset  (optional)</param>
        /// <param name="pypiAsset">pypi Asset  (optional)</param>
        /// <param name="helmAsset">helm Asset  (optional)</param>
        /// <param name="npmAsset">npm Asset  (optional)</param>
        /// <param name="rawDirectory">raw Directory (optional)</param>
        /// <param name="rawAsset1">raw Asset 1 (optional)</param>
        /// <param name="rawAsset1Filename">raw Asset 1 Filename (optional)</param>
        /// <param name="rawAsset2">raw Asset 2 (optional)</param>
        /// <param name="rawAsset2Filename">raw Asset 2 Filename (optional)</param>
        /// <param name="rawAsset3">raw Asset 3 (optional)</param>
        /// <param name="rawAsset3Filename">raw Asset 3 Filename (optional)</param>
        /// <param name="maven2GroupId">maven2 Group ID (optional)</param>
        /// <param name="maven2ArtifactId">maven2 Artifact ID (optional)</param>
        /// <param name="maven2Version">maven2 Version (optional)</param>
        /// <param name="maven2GeneratePom">maven2 Generate a POM file with these coordinates (optional)</param>
        /// <param name="maven2Packaging">maven2 Packaging (optional)</param>
        /// <param name="maven2Asset1">maven2 Asset 1 (optional)</param>
        /// <param name="maven2Asset1Classifier">maven2 Asset 1 Classifier (optional)</param>
        /// <param name="maven2Asset1Extension">maven2 Asset 1 Extension (optional)</param>
        /// <param name="maven2Asset2">maven2 Asset 2 (optional)</param>
        /// <param name="maven2Asset2Classifier">maven2 Asset 2 Classifier (optional)</param>
        /// <param name="maven2Asset2Extension">maven2 Asset 2 Extension (optional)</param>
        /// <param name="maven2Asset3">maven2 Asset 3 (optional)</param>
        /// <param name="maven2Asset3Classifier">maven2 Asset 3 Classifier (optional)</param>
        /// <param name="maven2Asset3Extension">maven2 Asset 3 Extension (optional)</param>
        /// <returns></returns>
        void UploadComponent (string repository, System.IO.Stream rAsset = null, string rAssetPathId = null, System.IO.Stream aptAsset = null, string yumDirectory = null, System.IO.Stream yumAsset = null, string yumAssetFilename = null, System.IO.Stream dockerAsset = null, System.IO.Stream rubygemsAsset = null, System.IO.Stream nugetAsset = null, System.IO.Stream pypiAsset = null, System.IO.Stream helmAsset = null, System.IO.Stream npmAsset = null, string rawDirectory = null, System.IO.Stream rawAsset1 = null, string rawAsset1Filename = null, System.IO.Stream rawAsset2 = null, string rawAsset2Filename = null, System.IO.Stream rawAsset3 = null, string rawAsset3Filename = null, string maven2GroupId = null, string maven2ArtifactId = null, string maven2Version = null, bool? maven2GeneratePom = null, string maven2Packaging = null, System.IO.Stream maven2Asset1 = null, string maven2Asset1Classifier = null, string maven2Asset1Extension = null, System.IO.Stream maven2Asset2 = null, string maven2Asset2Classifier = null, string maven2Asset2Extension = null, System.IO.Stream maven2Asset3 = null, string maven2Asset3Classifier = null, string maven2Asset3Extension = null);

        /// <summary>
        /// Upload a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Name of the repository to which you would like to upload the component</param>
        /// <param name="rAsset">r Asset  (optional)</param>
        /// <param name="rAssetPathId">r Asset  Package Path (optional)</param>
        /// <param name="aptAsset">apt Asset  (optional)</param>
        /// <param name="yumDirectory">yum Directory (optional)</param>
        /// <param name="yumAsset">yum Asset  (optional)</param>
        /// <param name="yumAssetFilename">yum Asset  Filename (optional)</param>
        /// <param name="dockerAsset">docker Asset  (optional)</param>
        /// <param name="rubygemsAsset">rubygems Asset  (optional)</param>
        /// <param name="nugetAsset">nuget Asset  (optional)</param>
        /// <param name="pypiAsset">pypi Asset  (optional)</param>
        /// <param name="helmAsset">helm Asset  (optional)</param>
        /// <param name="npmAsset">npm Asset  (optional)</param>
        /// <param name="rawDirectory">raw Directory (optional)</param>
        /// <param name="rawAsset1">raw Asset 1 (optional)</param>
        /// <param name="rawAsset1Filename">raw Asset 1 Filename (optional)</param>
        /// <param name="rawAsset2">raw Asset 2 (optional)</param>
        /// <param name="rawAsset2Filename">raw Asset 2 Filename (optional)</param>
        /// <param name="rawAsset3">raw Asset 3 (optional)</param>
        /// <param name="rawAsset3Filename">raw Asset 3 Filename (optional)</param>
        /// <param name="maven2GroupId">maven2 Group ID (optional)</param>
        /// <param name="maven2ArtifactId">maven2 Artifact ID (optional)</param>
        /// <param name="maven2Version">maven2 Version (optional)</param>
        /// <param name="maven2GeneratePom">maven2 Generate a POM file with these coordinates (optional)</param>
        /// <param name="maven2Packaging">maven2 Packaging (optional)</param>
        /// <param name="maven2Asset1">maven2 Asset 1 (optional)</param>
        /// <param name="maven2Asset1Classifier">maven2 Asset 1 Classifier (optional)</param>
        /// <param name="maven2Asset1Extension">maven2 Asset 1 Extension (optional)</param>
        /// <param name="maven2Asset2">maven2 Asset 2 (optional)</param>
        /// <param name="maven2Asset2Classifier">maven2 Asset 2 Classifier (optional)</param>
        /// <param name="maven2Asset2Extension">maven2 Asset 2 Extension (optional)</param>
        /// <param name="maven2Asset3">maven2 Asset 3 (optional)</param>
        /// <param name="maven2Asset3Classifier">maven2 Asset 3 Classifier (optional)</param>
        /// <param name="maven2Asset3Extension">maven2 Asset 3 Extension (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadComponentWithHttpInfo (string repository, System.IO.Stream rAsset = null, string rAssetPathId = null, System.IO.Stream aptAsset = null, string yumDirectory = null, System.IO.Stream yumAsset = null, string yumAssetFilename = null, System.IO.Stream dockerAsset = null, System.IO.Stream rubygemsAsset = null, System.IO.Stream nugetAsset = null, System.IO.Stream pypiAsset = null, System.IO.Stream helmAsset = null, System.IO.Stream npmAsset = null, string rawDirectory = null, System.IO.Stream rawAsset1 = null, string rawAsset1Filename = null, System.IO.Stream rawAsset2 = null, string rawAsset2Filename = null, System.IO.Stream rawAsset3 = null, string rawAsset3Filename = null, string maven2GroupId = null, string maven2ArtifactId = null, string maven2Version = null, bool? maven2GeneratePom = null, string maven2Packaging = null, System.IO.Stream maven2Asset1 = null, string maven2Asset1Classifier = null, string maven2Asset1Extension = null, System.IO.Stream maven2Asset2 = null, string maven2Asset2Classifier = null, string maven2Asset2Extension = null, System.IO.Stream maven2Asset3 = null, string maven2Asset3Classifier = null, string maven2Asset3Extension = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteComponentAsync (string id);

        /// <summary>
        /// Delete a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteComponentAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to retrieve</param>
        /// <returns>Task of ComponentXO</returns>
        System.Threading.Tasks.Task<ComponentXO> GetComponentByIdAsync (string id);

        /// <summary>
        /// Get a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to retrieve</param>
        /// <returns>Task of ApiResponse (ComponentXO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComponentXO>> GetComponentByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// List components
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Repository from which you would like to retrieve components</param>
        /// <param name="continuationToken">A token returned by a prior request. If present, the next page of results are returned (optional)</param>
        /// <returns>Task of PageComponentXO</returns>
        System.Threading.Tasks.Task<PageComponentXO> GetComponentsAsync (string repository, string continuationToken = null);

        /// <summary>
        /// List components
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Repository from which you would like to retrieve components</param>
        /// <param name="continuationToken">A token returned by a prior request. If present, the next page of results are returned (optional)</param>
        /// <returns>Task of ApiResponse (PageComponentXO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageComponentXO>> GetComponentsAsyncWithHttpInfo (string repository, string continuationToken = null);
        /// <summary>
        /// Upload a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Name of the repository to which you would like to upload the component</param>
        /// <param name="rAsset">r Asset  (optional)</param>
        /// <param name="rAssetPathId">r Asset  Package Path (optional)</param>
        /// <param name="aptAsset">apt Asset  (optional)</param>
        /// <param name="yumDirectory">yum Directory (optional)</param>
        /// <param name="yumAsset">yum Asset  (optional)</param>
        /// <param name="yumAssetFilename">yum Asset  Filename (optional)</param>
        /// <param name="dockerAsset">docker Asset  (optional)</param>
        /// <param name="rubygemsAsset">rubygems Asset  (optional)</param>
        /// <param name="nugetAsset">nuget Asset  (optional)</param>
        /// <param name="pypiAsset">pypi Asset  (optional)</param>
        /// <param name="helmAsset">helm Asset  (optional)</param>
        /// <param name="npmAsset">npm Asset  (optional)</param>
        /// <param name="rawDirectory">raw Directory (optional)</param>
        /// <param name="rawAsset1">raw Asset 1 (optional)</param>
        /// <param name="rawAsset1Filename">raw Asset 1 Filename (optional)</param>
        /// <param name="rawAsset2">raw Asset 2 (optional)</param>
        /// <param name="rawAsset2Filename">raw Asset 2 Filename (optional)</param>
        /// <param name="rawAsset3">raw Asset 3 (optional)</param>
        /// <param name="rawAsset3Filename">raw Asset 3 Filename (optional)</param>
        /// <param name="maven2GroupId">maven2 Group ID (optional)</param>
        /// <param name="maven2ArtifactId">maven2 Artifact ID (optional)</param>
        /// <param name="maven2Version">maven2 Version (optional)</param>
        /// <param name="maven2GeneratePom">maven2 Generate a POM file with these coordinates (optional)</param>
        /// <param name="maven2Packaging">maven2 Packaging (optional)</param>
        /// <param name="maven2Asset1">maven2 Asset 1 (optional)</param>
        /// <param name="maven2Asset1Classifier">maven2 Asset 1 Classifier (optional)</param>
        /// <param name="maven2Asset1Extension">maven2 Asset 1 Extension (optional)</param>
        /// <param name="maven2Asset2">maven2 Asset 2 (optional)</param>
        /// <param name="maven2Asset2Classifier">maven2 Asset 2 Classifier (optional)</param>
        /// <param name="maven2Asset2Extension">maven2 Asset 2 Extension (optional)</param>
        /// <param name="maven2Asset3">maven2 Asset 3 (optional)</param>
        /// <param name="maven2Asset3Classifier">maven2 Asset 3 Classifier (optional)</param>
        /// <param name="maven2Asset3Extension">maven2 Asset 3 Extension (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadComponentAsync (string repository, System.IO.Stream rAsset = null, string rAssetPathId = null, System.IO.Stream aptAsset = null, string yumDirectory = null, System.IO.Stream yumAsset = null, string yumAssetFilename = null, System.IO.Stream dockerAsset = null, System.IO.Stream rubygemsAsset = null, System.IO.Stream nugetAsset = null, System.IO.Stream pypiAsset = null, System.IO.Stream helmAsset = null, System.IO.Stream npmAsset = null, string rawDirectory = null, System.IO.Stream rawAsset1 = null, string rawAsset1Filename = null, System.IO.Stream rawAsset2 = null, string rawAsset2Filename = null, System.IO.Stream rawAsset3 = null, string rawAsset3Filename = null, string maven2GroupId = null, string maven2ArtifactId = null, string maven2Version = null, bool? maven2GeneratePom = null, string maven2Packaging = null, System.IO.Stream maven2Asset1 = null, string maven2Asset1Classifier = null, string maven2Asset1Extension = null, System.IO.Stream maven2Asset2 = null, string maven2Asset2Classifier = null, string maven2Asset2Extension = null, System.IO.Stream maven2Asset3 = null, string maven2Asset3Classifier = null, string maven2Asset3Extension = null);

        /// <summary>
        /// Upload a single component
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Name of the repository to which you would like to upload the component</param>
        /// <param name="rAsset">r Asset  (optional)</param>
        /// <param name="rAssetPathId">r Asset  Package Path (optional)</param>
        /// <param name="aptAsset">apt Asset  (optional)</param>
        /// <param name="yumDirectory">yum Directory (optional)</param>
        /// <param name="yumAsset">yum Asset  (optional)</param>
        /// <param name="yumAssetFilename">yum Asset  Filename (optional)</param>
        /// <param name="dockerAsset">docker Asset  (optional)</param>
        /// <param name="rubygemsAsset">rubygems Asset  (optional)</param>
        /// <param name="nugetAsset">nuget Asset  (optional)</param>
        /// <param name="pypiAsset">pypi Asset  (optional)</param>
        /// <param name="helmAsset">helm Asset  (optional)</param>
        /// <param name="npmAsset">npm Asset  (optional)</param>
        /// <param name="rawDirectory">raw Directory (optional)</param>
        /// <param name="rawAsset1">raw Asset 1 (optional)</param>
        /// <param name="rawAsset1Filename">raw Asset 1 Filename (optional)</param>
        /// <param name="rawAsset2">raw Asset 2 (optional)</param>
        /// <param name="rawAsset2Filename">raw Asset 2 Filename (optional)</param>
        /// <param name="rawAsset3">raw Asset 3 (optional)</param>
        /// <param name="rawAsset3Filename">raw Asset 3 Filename (optional)</param>
        /// <param name="maven2GroupId">maven2 Group ID (optional)</param>
        /// <param name="maven2ArtifactId">maven2 Artifact ID (optional)</param>
        /// <param name="maven2Version">maven2 Version (optional)</param>
        /// <param name="maven2GeneratePom">maven2 Generate a POM file with these coordinates (optional)</param>
        /// <param name="maven2Packaging">maven2 Packaging (optional)</param>
        /// <param name="maven2Asset1">maven2 Asset 1 (optional)</param>
        /// <param name="maven2Asset1Classifier">maven2 Asset 1 Classifier (optional)</param>
        /// <param name="maven2Asset1Extension">maven2 Asset 1 Extension (optional)</param>
        /// <param name="maven2Asset2">maven2 Asset 2 (optional)</param>
        /// <param name="maven2Asset2Classifier">maven2 Asset 2 Classifier (optional)</param>
        /// <param name="maven2Asset2Extension">maven2 Asset 2 Extension (optional)</param>
        /// <param name="maven2Asset3">maven2 Asset 3 (optional)</param>
        /// <param name="maven2Asset3Classifier">maven2 Asset 3 Classifier (optional)</param>
        /// <param name="maven2Asset3Extension">maven2 Asset 3 Extension (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadComponentAsyncWithHttpInfo (string repository, System.IO.Stream rAsset = null, string rAssetPathId = null, System.IO.Stream aptAsset = null, string yumDirectory = null, System.IO.Stream yumAsset = null, string yumAssetFilename = null, System.IO.Stream dockerAsset = null, System.IO.Stream rubygemsAsset = null, System.IO.Stream nugetAsset = null, System.IO.Stream pypiAsset = null, System.IO.Stream helmAsset = null, System.IO.Stream npmAsset = null, string rawDirectory = null, System.IO.Stream rawAsset1 = null, string rawAsset1Filename = null, System.IO.Stream rawAsset2 = null, string rawAsset2Filename = null, System.IO.Stream rawAsset3 = null, string rawAsset3Filename = null, string maven2GroupId = null, string maven2ArtifactId = null, string maven2Version = null, bool? maven2GeneratePom = null, string maven2Packaging = null, System.IO.Stream maven2Asset1 = null, string maven2Asset1Classifier = null, string maven2Asset1Extension = null, System.IO.Stream maven2Asset2 = null, string maven2Asset2Classifier = null, string maven2Asset2Extension = null, System.IO.Stream maven2Asset3 = null, string maven2Asset3Classifier = null, string maven2Asset3Extension = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComponentsApi : IComponentsApi
    {
        private Bess.IO.Rest.Nexus3.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComponentsApi(String basePath)
        {
            this.Configuration = new Bess.IO.Rest.Nexus3.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Bess.IO.Rest.Nexus3.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComponentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComponentsApi(Bess.IO.Rest.Nexus3.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Bess.IO.Rest.Nexus3.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Bess.IO.Rest.Nexus3.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bess.IO.Rest.Nexus3.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bess.IO.Rest.Nexus3.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to delete</param>
        /// <returns></returns>
        public void DeleteComponent (string id)
        {
             DeleteComponentWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteComponentWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ComponentsApi->DeleteComponent");

            var localVarPath = "./v1/components/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteComponentAsync (string id)
        {
             await DeleteComponentAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteComponentAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ComponentsApi->DeleteComponent");

            var localVarPath = "./v1/components/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to retrieve</param>
        /// <returns>ComponentXO</returns>
        public ComponentXO GetComponentById (string id)
        {
             ApiResponse<ComponentXO> localVarResponse = GetComponentByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to retrieve</param>
        /// <returns>ApiResponse of ComponentXO</returns>
        public ApiResponse< ComponentXO > GetComponentByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ComponentsApi->GetComponentById");

            var localVarPath = "./v1/components/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComponentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComponentXO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ComponentXO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComponentXO)));
        }

        /// <summary>
        /// Get a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to retrieve</param>
        /// <returns>Task of ComponentXO</returns>
        public async System.Threading.Tasks.Task<ComponentXO> GetComponentByIdAsync (string id)
        {
             ApiResponse<ComponentXO> localVarResponse = await GetComponentByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the component to retrieve</param>
        /// <returns>Task of ApiResponse (ComponentXO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComponentXO>> GetComponentByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ComponentsApi->GetComponentById");

            var localVarPath = "./v1/components/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComponentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComponentXO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ComponentXO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComponentXO)));
        }

        /// <summary>
        /// List components 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Repository from which you would like to retrieve components</param>
        /// <param name="continuationToken">A token returned by a prior request. If present, the next page of results are returned (optional)</param>
        /// <returns>PageComponentXO</returns>
        public PageComponentXO GetComponents (string repository, string continuationToken = null)
        {
             ApiResponse<PageComponentXO> localVarResponse = GetComponentsWithHttpInfo(repository, continuationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List components 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Repository from which you would like to retrieve components</param>
        /// <param name="continuationToken">A token returned by a prior request. If present, the next page of results are returned (optional)</param>
        /// <returns>ApiResponse of PageComponentXO</returns>
        public ApiResponse< PageComponentXO > GetComponentsWithHttpInfo (string repository, string continuationToken = null)
        {
            // verify the required parameter 'repository' is set
            if (repository == null)
                throw new ApiException(400, "Missing required parameter 'repository' when calling ComponentsApi->GetComponents");

            var localVarPath = "./v1/components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (continuationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continuationToken", continuationToken)); // query parameter
            if (repository != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repository", repository)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageComponentXO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PageComponentXO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageComponentXO)));
        }

        /// <summary>
        /// List components 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Repository from which you would like to retrieve components</param>
        /// <param name="continuationToken">A token returned by a prior request. If present, the next page of results are returned (optional)</param>
        /// <returns>Task of PageComponentXO</returns>
        public async System.Threading.Tasks.Task<PageComponentXO> GetComponentsAsync (string repository, string continuationToken = null)
        {
             ApiResponse<PageComponentXO> localVarResponse = await GetComponentsAsyncWithHttpInfo(repository, continuationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List components 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Repository from which you would like to retrieve components</param>
        /// <param name="continuationToken">A token returned by a prior request. If present, the next page of results are returned (optional)</param>
        /// <returns>Task of ApiResponse (PageComponentXO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageComponentXO>> GetComponentsAsyncWithHttpInfo (string repository, string continuationToken = null)
        {
            // verify the required parameter 'repository' is set
            if (repository == null)
                throw new ApiException(400, "Missing required parameter 'repository' when calling ComponentsApi->GetComponents");

            var localVarPath = "./v1/components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (continuationToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continuationToken", continuationToken)); // query parameter
            if (repository != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repository", repository)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageComponentXO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PageComponentXO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageComponentXO)));
        }

        /// <summary>
        /// Upload a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Name of the repository to which you would like to upload the component</param>
        /// <param name="rAsset">r Asset  (optional)</param>
        /// <param name="rAssetPathId">r Asset  Package Path (optional)</param>
        /// <param name="aptAsset">apt Asset  (optional)</param>
        /// <param name="yumDirectory">yum Directory (optional)</param>
        /// <param name="yumAsset">yum Asset  (optional)</param>
        /// <param name="yumAssetFilename">yum Asset  Filename (optional)</param>
        /// <param name="dockerAsset">docker Asset  (optional)</param>
        /// <param name="rubygemsAsset">rubygems Asset  (optional)</param>
        /// <param name="nugetAsset">nuget Asset  (optional)</param>
        /// <param name="pypiAsset">pypi Asset  (optional)</param>
        /// <param name="helmAsset">helm Asset  (optional)</param>
        /// <param name="npmAsset">npm Asset  (optional)</param>
        /// <param name="rawDirectory">raw Directory (optional)</param>
        /// <param name="rawAsset1">raw Asset 1 (optional)</param>
        /// <param name="rawAsset1Filename">raw Asset 1 Filename (optional)</param>
        /// <param name="rawAsset2">raw Asset 2 (optional)</param>
        /// <param name="rawAsset2Filename">raw Asset 2 Filename (optional)</param>
        /// <param name="rawAsset3">raw Asset 3 (optional)</param>
        /// <param name="rawAsset3Filename">raw Asset 3 Filename (optional)</param>
        /// <param name="maven2GroupId">maven2 Group ID (optional)</param>
        /// <param name="maven2ArtifactId">maven2 Artifact ID (optional)</param>
        /// <param name="maven2Version">maven2 Version (optional)</param>
        /// <param name="maven2GeneratePom">maven2 Generate a POM file with these coordinates (optional)</param>
        /// <param name="maven2Packaging">maven2 Packaging (optional)</param>
        /// <param name="maven2Asset1">maven2 Asset 1 (optional)</param>
        /// <param name="maven2Asset1Classifier">maven2 Asset 1 Classifier (optional)</param>
        /// <param name="maven2Asset1Extension">maven2 Asset 1 Extension (optional)</param>
        /// <param name="maven2Asset2">maven2 Asset 2 (optional)</param>
        /// <param name="maven2Asset2Classifier">maven2 Asset 2 Classifier (optional)</param>
        /// <param name="maven2Asset2Extension">maven2 Asset 2 Extension (optional)</param>
        /// <param name="maven2Asset3">maven2 Asset 3 (optional)</param>
        /// <param name="maven2Asset3Classifier">maven2 Asset 3 Classifier (optional)</param>
        /// <param name="maven2Asset3Extension">maven2 Asset 3 Extension (optional)</param>
        /// <returns></returns>
        public void UploadComponent (string repository, System.IO.Stream rAsset = null, string rAssetPathId = null, System.IO.Stream aptAsset = null, string yumDirectory = null, System.IO.Stream yumAsset = null, string yumAssetFilename = null, System.IO.Stream dockerAsset = null, System.IO.Stream rubygemsAsset = null, System.IO.Stream nugetAsset = null, System.IO.Stream pypiAsset = null, System.IO.Stream helmAsset = null, System.IO.Stream npmAsset = null, string rawDirectory = null, System.IO.Stream rawAsset1 = null, string rawAsset1Filename = null, System.IO.Stream rawAsset2 = null, string rawAsset2Filename = null, System.IO.Stream rawAsset3 = null, string rawAsset3Filename = null, string maven2GroupId = null, string maven2ArtifactId = null, string maven2Version = null, bool? maven2GeneratePom = null, string maven2Packaging = null, System.IO.Stream maven2Asset1 = null, string maven2Asset1Classifier = null, string maven2Asset1Extension = null, System.IO.Stream maven2Asset2 = null, string maven2Asset2Classifier = null, string maven2Asset2Extension = null, System.IO.Stream maven2Asset3 = null, string maven2Asset3Classifier = null, string maven2Asset3Extension = null)
        {
             UploadComponentWithHttpInfo(repository, rAsset, rAssetPathId, aptAsset, yumDirectory, yumAsset, yumAssetFilename, dockerAsset, rubygemsAsset, nugetAsset, pypiAsset, helmAsset, npmAsset, rawDirectory, rawAsset1, rawAsset1Filename, rawAsset2, rawAsset2Filename, rawAsset3, rawAsset3Filename, maven2GroupId, maven2ArtifactId, maven2Version, maven2GeneratePom, maven2Packaging, maven2Asset1, maven2Asset1Classifier, maven2Asset1Extension, maven2Asset2, maven2Asset2Classifier, maven2Asset2Extension, maven2Asset3, maven2Asset3Classifier, maven2Asset3Extension);
        }

        /// <summary>
        /// Upload a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Name of the repository to which you would like to upload the component</param>
        /// <param name="rAsset">r Asset  (optional)</param>
        /// <param name="rAssetPathId">r Asset  Package Path (optional)</param>
        /// <param name="aptAsset">apt Asset  (optional)</param>
        /// <param name="yumDirectory">yum Directory (optional)</param>
        /// <param name="yumAsset">yum Asset  (optional)</param>
        /// <param name="yumAssetFilename">yum Asset  Filename (optional)</param>
        /// <param name="dockerAsset">docker Asset  (optional)</param>
        /// <param name="rubygemsAsset">rubygems Asset  (optional)</param>
        /// <param name="nugetAsset">nuget Asset  (optional)</param>
        /// <param name="pypiAsset">pypi Asset  (optional)</param>
        /// <param name="helmAsset">helm Asset  (optional)</param>
        /// <param name="npmAsset">npm Asset  (optional)</param>
        /// <param name="rawDirectory">raw Directory (optional)</param>
        /// <param name="rawAsset1">raw Asset 1 (optional)</param>
        /// <param name="rawAsset1Filename">raw Asset 1 Filename (optional)</param>
        /// <param name="rawAsset2">raw Asset 2 (optional)</param>
        /// <param name="rawAsset2Filename">raw Asset 2 Filename (optional)</param>
        /// <param name="rawAsset3">raw Asset 3 (optional)</param>
        /// <param name="rawAsset3Filename">raw Asset 3 Filename (optional)</param>
        /// <param name="maven2GroupId">maven2 Group ID (optional)</param>
        /// <param name="maven2ArtifactId">maven2 Artifact ID (optional)</param>
        /// <param name="maven2Version">maven2 Version (optional)</param>
        /// <param name="maven2GeneratePom">maven2 Generate a POM file with these coordinates (optional)</param>
        /// <param name="maven2Packaging">maven2 Packaging (optional)</param>
        /// <param name="maven2Asset1">maven2 Asset 1 (optional)</param>
        /// <param name="maven2Asset1Classifier">maven2 Asset 1 Classifier (optional)</param>
        /// <param name="maven2Asset1Extension">maven2 Asset 1 Extension (optional)</param>
        /// <param name="maven2Asset2">maven2 Asset 2 (optional)</param>
        /// <param name="maven2Asset2Classifier">maven2 Asset 2 Classifier (optional)</param>
        /// <param name="maven2Asset2Extension">maven2 Asset 2 Extension (optional)</param>
        /// <param name="maven2Asset3">maven2 Asset 3 (optional)</param>
        /// <param name="maven2Asset3Classifier">maven2 Asset 3 Classifier (optional)</param>
        /// <param name="maven2Asset3Extension">maven2 Asset 3 Extension (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadComponentWithHttpInfo (string repository, System.IO.Stream rAsset = null, string rAssetPathId = null, System.IO.Stream aptAsset = null, string yumDirectory = null, System.IO.Stream yumAsset = null, string yumAssetFilename = null, System.IO.Stream dockerAsset = null, System.IO.Stream rubygemsAsset = null, System.IO.Stream nugetAsset = null, System.IO.Stream pypiAsset = null, System.IO.Stream helmAsset = null, System.IO.Stream npmAsset = null, string rawDirectory = null, System.IO.Stream rawAsset1 = null, string rawAsset1Filename = null, System.IO.Stream rawAsset2 = null, string rawAsset2Filename = null, System.IO.Stream rawAsset3 = null, string rawAsset3Filename = null, string maven2GroupId = null, string maven2ArtifactId = null, string maven2Version = null, bool? maven2GeneratePom = null, string maven2Packaging = null, System.IO.Stream maven2Asset1 = null, string maven2Asset1Classifier = null, string maven2Asset1Extension = null, System.IO.Stream maven2Asset2 = null, string maven2Asset2Classifier = null, string maven2Asset2Extension = null, System.IO.Stream maven2Asset3 = null, string maven2Asset3Classifier = null, string maven2Asset3Extension = null)
        {
            // verify the required parameter 'repository' is set
            if (repository == null)
                throw new ApiException(400, "Missing required parameter 'repository' when calling ComponentsApi->UploadComponent");

            var localVarPath = "./v1/components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repository != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repository", repository)); // query parameter
            if (rAsset != null) localVarFileParams.Add("r.asset", this.Configuration.ApiClient.ParameterToFile("r.asset", rAsset));
            if (rAssetPathId != null) localVarFormParams.Add("r.asset.pathId", this.Configuration.ApiClient.ParameterToString(rAssetPathId)); // form parameter
            if (aptAsset != null) localVarFileParams.Add("apt.asset", this.Configuration.ApiClient.ParameterToFile("apt.asset", aptAsset));
            if (yumDirectory != null) localVarFormParams.Add("yum.directory", this.Configuration.ApiClient.ParameterToString(yumDirectory)); // form parameter
            if (yumAsset != null) localVarFileParams.Add("yum.asset", this.Configuration.ApiClient.ParameterToFile("yum.asset", yumAsset));
            if (yumAssetFilename != null) localVarFormParams.Add("yum.asset.filename", this.Configuration.ApiClient.ParameterToString(yumAssetFilename)); // form parameter
            if (dockerAsset != null) localVarFileParams.Add("docker.asset", this.Configuration.ApiClient.ParameterToFile("docker.asset", dockerAsset));
            if (rubygemsAsset != null) localVarFileParams.Add("rubygems.asset", this.Configuration.ApiClient.ParameterToFile("rubygems.asset", rubygemsAsset));
            if (nugetAsset != null) localVarFileParams.Add("nuget.asset", this.Configuration.ApiClient.ParameterToFile("nuget.asset", nugetAsset));
            if (pypiAsset != null) localVarFileParams.Add("pypi.asset", this.Configuration.ApiClient.ParameterToFile("pypi.asset", pypiAsset));
            if (helmAsset != null) localVarFileParams.Add("helm.asset", this.Configuration.ApiClient.ParameterToFile("helm.asset", helmAsset));
            if (npmAsset != null) localVarFileParams.Add("npm.asset", this.Configuration.ApiClient.ParameterToFile("npm.asset", npmAsset));
            if (rawDirectory != null) localVarFormParams.Add("raw.directory", this.Configuration.ApiClient.ParameterToString(rawDirectory)); // form parameter
            if (rawAsset1 != null) localVarFileParams.Add("raw.asset1", this.Configuration.ApiClient.ParameterToFile("raw.asset1", rawAsset1));
            if (rawAsset1Filename != null) localVarFormParams.Add("raw.asset1.filename", this.Configuration.ApiClient.ParameterToString(rawAsset1Filename)); // form parameter
            if (rawAsset2 != null) localVarFileParams.Add("raw.asset2", this.Configuration.ApiClient.ParameterToFile("raw.asset2", rawAsset2));
            if (rawAsset2Filename != null) localVarFormParams.Add("raw.asset2.filename", this.Configuration.ApiClient.ParameterToString(rawAsset2Filename)); // form parameter
            if (rawAsset3 != null) localVarFileParams.Add("raw.asset3", this.Configuration.ApiClient.ParameterToFile("raw.asset3", rawAsset3));
            if (rawAsset3Filename != null) localVarFormParams.Add("raw.asset3.filename", this.Configuration.ApiClient.ParameterToString(rawAsset3Filename)); // form parameter
            if (maven2GroupId != null) localVarFormParams.Add("maven2.groupId", this.Configuration.ApiClient.ParameterToString(maven2GroupId)); // form parameter
            if (maven2ArtifactId != null) localVarFormParams.Add("maven2.artifactId", this.Configuration.ApiClient.ParameterToString(maven2ArtifactId)); // form parameter
            if (maven2Version != null) localVarFormParams.Add("maven2.version", this.Configuration.ApiClient.ParameterToString(maven2Version)); // form parameter
            if (maven2GeneratePom != null) localVarFormParams.Add("maven2.generate-pom", this.Configuration.ApiClient.ParameterToString(maven2GeneratePom)); // form parameter
            if (maven2Packaging != null) localVarFormParams.Add("maven2.packaging", this.Configuration.ApiClient.ParameterToString(maven2Packaging)); // form parameter
            if (maven2Asset1 != null) localVarFileParams.Add("maven2.asset1", this.Configuration.ApiClient.ParameterToFile("maven2.asset1", maven2Asset1));
            if (maven2Asset1Classifier != null) localVarFormParams.Add("maven2.asset1.classifier", this.Configuration.ApiClient.ParameterToString(maven2Asset1Classifier)); // form parameter
            if (maven2Asset1Extension != null) localVarFormParams.Add("maven2.asset1.extension", this.Configuration.ApiClient.ParameterToString(maven2Asset1Extension)); // form parameter
            if (maven2Asset2 != null) localVarFileParams.Add("maven2.asset2", this.Configuration.ApiClient.ParameterToFile("maven2.asset2", maven2Asset2));
            if (maven2Asset2Classifier != null) localVarFormParams.Add("maven2.asset2.classifier", this.Configuration.ApiClient.ParameterToString(maven2Asset2Classifier)); // form parameter
            if (maven2Asset2Extension != null) localVarFormParams.Add("maven2.asset2.extension", this.Configuration.ApiClient.ParameterToString(maven2Asset2Extension)); // form parameter
            if (maven2Asset3 != null) localVarFileParams.Add("maven2.asset3", this.Configuration.ApiClient.ParameterToFile("maven2.asset3", maven2Asset3));
            if (maven2Asset3Classifier != null) localVarFormParams.Add("maven2.asset3.classifier", this.Configuration.ApiClient.ParameterToString(maven2Asset3Classifier)); // form parameter
            if (maven2Asset3Extension != null) localVarFormParams.Add("maven2.asset3.extension", this.Configuration.ApiClient.ParameterToString(maven2Asset3Extension)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Name of the repository to which you would like to upload the component</param>
        /// <param name="rAsset">r Asset  (optional)</param>
        /// <param name="rAssetPathId">r Asset  Package Path (optional)</param>
        /// <param name="aptAsset">apt Asset  (optional)</param>
        /// <param name="yumDirectory">yum Directory (optional)</param>
        /// <param name="yumAsset">yum Asset  (optional)</param>
        /// <param name="yumAssetFilename">yum Asset  Filename (optional)</param>
        /// <param name="dockerAsset">docker Asset  (optional)</param>
        /// <param name="rubygemsAsset">rubygems Asset  (optional)</param>
        /// <param name="nugetAsset">nuget Asset  (optional)</param>
        /// <param name="pypiAsset">pypi Asset  (optional)</param>
        /// <param name="helmAsset">helm Asset  (optional)</param>
        /// <param name="npmAsset">npm Asset  (optional)</param>
        /// <param name="rawDirectory">raw Directory (optional)</param>
        /// <param name="rawAsset1">raw Asset 1 (optional)</param>
        /// <param name="rawAsset1Filename">raw Asset 1 Filename (optional)</param>
        /// <param name="rawAsset2">raw Asset 2 (optional)</param>
        /// <param name="rawAsset2Filename">raw Asset 2 Filename (optional)</param>
        /// <param name="rawAsset3">raw Asset 3 (optional)</param>
        /// <param name="rawAsset3Filename">raw Asset 3 Filename (optional)</param>
        /// <param name="maven2GroupId">maven2 Group ID (optional)</param>
        /// <param name="maven2ArtifactId">maven2 Artifact ID (optional)</param>
        /// <param name="maven2Version">maven2 Version (optional)</param>
        /// <param name="maven2GeneratePom">maven2 Generate a POM file with these coordinates (optional)</param>
        /// <param name="maven2Packaging">maven2 Packaging (optional)</param>
        /// <param name="maven2Asset1">maven2 Asset 1 (optional)</param>
        /// <param name="maven2Asset1Classifier">maven2 Asset 1 Classifier (optional)</param>
        /// <param name="maven2Asset1Extension">maven2 Asset 1 Extension (optional)</param>
        /// <param name="maven2Asset2">maven2 Asset 2 (optional)</param>
        /// <param name="maven2Asset2Classifier">maven2 Asset 2 Classifier (optional)</param>
        /// <param name="maven2Asset2Extension">maven2 Asset 2 Extension (optional)</param>
        /// <param name="maven2Asset3">maven2 Asset 3 (optional)</param>
        /// <param name="maven2Asset3Classifier">maven2 Asset 3 Classifier (optional)</param>
        /// <param name="maven2Asset3Extension">maven2 Asset 3 Extension (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadComponentAsync (string repository, System.IO.Stream rAsset = null, string rAssetPathId = null, System.IO.Stream aptAsset = null, string yumDirectory = null, System.IO.Stream yumAsset = null, string yumAssetFilename = null, System.IO.Stream dockerAsset = null, System.IO.Stream rubygemsAsset = null, System.IO.Stream nugetAsset = null, System.IO.Stream pypiAsset = null, System.IO.Stream helmAsset = null, System.IO.Stream npmAsset = null, string rawDirectory = null, System.IO.Stream rawAsset1 = null, string rawAsset1Filename = null, System.IO.Stream rawAsset2 = null, string rawAsset2Filename = null, System.IO.Stream rawAsset3 = null, string rawAsset3Filename = null, string maven2GroupId = null, string maven2ArtifactId = null, string maven2Version = null, bool? maven2GeneratePom = null, string maven2Packaging = null, System.IO.Stream maven2Asset1 = null, string maven2Asset1Classifier = null, string maven2Asset1Extension = null, System.IO.Stream maven2Asset2 = null, string maven2Asset2Classifier = null, string maven2Asset2Extension = null, System.IO.Stream maven2Asset3 = null, string maven2Asset3Classifier = null, string maven2Asset3Extension = null)
        {
             await UploadComponentAsyncWithHttpInfo(repository, rAsset, rAssetPathId, aptAsset, yumDirectory, yumAsset, yumAssetFilename, dockerAsset, rubygemsAsset, nugetAsset, pypiAsset, helmAsset, npmAsset, rawDirectory, rawAsset1, rawAsset1Filename, rawAsset2, rawAsset2Filename, rawAsset3, rawAsset3Filename, maven2GroupId, maven2ArtifactId, maven2Version, maven2GeneratePom, maven2Packaging, maven2Asset1, maven2Asset1Classifier, maven2Asset1Extension, maven2Asset2, maven2Asset2Classifier, maven2Asset2Extension, maven2Asset3, maven2Asset3Classifier, maven2Asset3Extension);

        }

        /// <summary>
        /// Upload a single component 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repository">Name of the repository to which you would like to upload the component</param>
        /// <param name="rAsset">r Asset  (optional)</param>
        /// <param name="rAssetPathId">r Asset  Package Path (optional)</param>
        /// <param name="aptAsset">apt Asset  (optional)</param>
        /// <param name="yumDirectory">yum Directory (optional)</param>
        /// <param name="yumAsset">yum Asset  (optional)</param>
        /// <param name="yumAssetFilename">yum Asset  Filename (optional)</param>
        /// <param name="dockerAsset">docker Asset  (optional)</param>
        /// <param name="rubygemsAsset">rubygems Asset  (optional)</param>
        /// <param name="nugetAsset">nuget Asset  (optional)</param>
        /// <param name="pypiAsset">pypi Asset  (optional)</param>
        /// <param name="helmAsset">helm Asset  (optional)</param>
        /// <param name="npmAsset">npm Asset  (optional)</param>
        /// <param name="rawDirectory">raw Directory (optional)</param>
        /// <param name="rawAsset1">raw Asset 1 (optional)</param>
        /// <param name="rawAsset1Filename">raw Asset 1 Filename (optional)</param>
        /// <param name="rawAsset2">raw Asset 2 (optional)</param>
        /// <param name="rawAsset2Filename">raw Asset 2 Filename (optional)</param>
        /// <param name="rawAsset3">raw Asset 3 (optional)</param>
        /// <param name="rawAsset3Filename">raw Asset 3 Filename (optional)</param>
        /// <param name="maven2GroupId">maven2 Group ID (optional)</param>
        /// <param name="maven2ArtifactId">maven2 Artifact ID (optional)</param>
        /// <param name="maven2Version">maven2 Version (optional)</param>
        /// <param name="maven2GeneratePom">maven2 Generate a POM file with these coordinates (optional)</param>
        /// <param name="maven2Packaging">maven2 Packaging (optional)</param>
        /// <param name="maven2Asset1">maven2 Asset 1 (optional)</param>
        /// <param name="maven2Asset1Classifier">maven2 Asset 1 Classifier (optional)</param>
        /// <param name="maven2Asset1Extension">maven2 Asset 1 Extension (optional)</param>
        /// <param name="maven2Asset2">maven2 Asset 2 (optional)</param>
        /// <param name="maven2Asset2Classifier">maven2 Asset 2 Classifier (optional)</param>
        /// <param name="maven2Asset2Extension">maven2 Asset 2 Extension (optional)</param>
        /// <param name="maven2Asset3">maven2 Asset 3 (optional)</param>
        /// <param name="maven2Asset3Classifier">maven2 Asset 3 Classifier (optional)</param>
        /// <param name="maven2Asset3Extension">maven2 Asset 3 Extension (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadComponentAsyncWithHttpInfo (string repository, System.IO.Stream rAsset = null, string rAssetPathId = null, System.IO.Stream aptAsset = null, string yumDirectory = null, System.IO.Stream yumAsset = null, string yumAssetFilename = null, System.IO.Stream dockerAsset = null, System.IO.Stream rubygemsAsset = null, System.IO.Stream nugetAsset = null, System.IO.Stream pypiAsset = null, System.IO.Stream helmAsset = null, System.IO.Stream npmAsset = null, string rawDirectory = null, System.IO.Stream rawAsset1 = null, string rawAsset1Filename = null, System.IO.Stream rawAsset2 = null, string rawAsset2Filename = null, System.IO.Stream rawAsset3 = null, string rawAsset3Filename = null, string maven2GroupId = null, string maven2ArtifactId = null, string maven2Version = null, bool? maven2GeneratePom = null, string maven2Packaging = null, System.IO.Stream maven2Asset1 = null, string maven2Asset1Classifier = null, string maven2Asset1Extension = null, System.IO.Stream maven2Asset2 = null, string maven2Asset2Classifier = null, string maven2Asset2Extension = null, System.IO.Stream maven2Asset3 = null, string maven2Asset3Classifier = null, string maven2Asset3Extension = null)
        {
            // verify the required parameter 'repository' is set
            if (repository == null)
                throw new ApiException(400, "Missing required parameter 'repository' when calling ComponentsApi->UploadComponent");

            var localVarPath = "./v1/components";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repository != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "repository", repository)); // query parameter
            if (rAsset != null) localVarFileParams.Add("r.asset", this.Configuration.ApiClient.ParameterToFile("r.asset", rAsset));
            if (rAssetPathId != null) localVarFormParams.Add("r.asset.pathId", this.Configuration.ApiClient.ParameterToString(rAssetPathId)); // form parameter
            if (aptAsset != null) localVarFileParams.Add("apt.asset", this.Configuration.ApiClient.ParameterToFile("apt.asset", aptAsset));
            if (yumDirectory != null) localVarFormParams.Add("yum.directory", this.Configuration.ApiClient.ParameterToString(yumDirectory)); // form parameter
            if (yumAsset != null) localVarFileParams.Add("yum.asset", this.Configuration.ApiClient.ParameterToFile("yum.asset", yumAsset));
            if (yumAssetFilename != null) localVarFormParams.Add("yum.asset.filename", this.Configuration.ApiClient.ParameterToString(yumAssetFilename)); // form parameter
            if (dockerAsset != null) localVarFileParams.Add("docker.asset", this.Configuration.ApiClient.ParameterToFile("docker.asset", dockerAsset));
            if (rubygemsAsset != null) localVarFileParams.Add("rubygems.asset", this.Configuration.ApiClient.ParameterToFile("rubygems.asset", rubygemsAsset));
            if (nugetAsset != null) localVarFileParams.Add("nuget.asset", this.Configuration.ApiClient.ParameterToFile("nuget.asset", nugetAsset));
            if (pypiAsset != null) localVarFileParams.Add("pypi.asset", this.Configuration.ApiClient.ParameterToFile("pypi.asset", pypiAsset));
            if (helmAsset != null) localVarFileParams.Add("helm.asset", this.Configuration.ApiClient.ParameterToFile("helm.asset", helmAsset));
            if (npmAsset != null) localVarFileParams.Add("npm.asset", this.Configuration.ApiClient.ParameterToFile("npm.asset", npmAsset));
            if (rawDirectory != null) localVarFormParams.Add("raw.directory", this.Configuration.ApiClient.ParameterToString(rawDirectory)); // form parameter
            if (rawAsset1 != null) localVarFileParams.Add("raw.asset1", this.Configuration.ApiClient.ParameterToFile("raw.asset1", rawAsset1));
            if (rawAsset1Filename != null) localVarFormParams.Add("raw.asset1.filename", this.Configuration.ApiClient.ParameterToString(rawAsset1Filename)); // form parameter
            if (rawAsset2 != null) localVarFileParams.Add("raw.asset2", this.Configuration.ApiClient.ParameterToFile("raw.asset2", rawAsset2));
            if (rawAsset2Filename != null) localVarFormParams.Add("raw.asset2.filename", this.Configuration.ApiClient.ParameterToString(rawAsset2Filename)); // form parameter
            if (rawAsset3 != null) localVarFileParams.Add("raw.asset3", this.Configuration.ApiClient.ParameterToFile("raw.asset3", rawAsset3));
            if (rawAsset3Filename != null) localVarFormParams.Add("raw.asset3.filename", this.Configuration.ApiClient.ParameterToString(rawAsset3Filename)); // form parameter
            if (maven2GroupId != null) localVarFormParams.Add("maven2.groupId", this.Configuration.ApiClient.ParameterToString(maven2GroupId)); // form parameter
            if (maven2ArtifactId != null) localVarFormParams.Add("maven2.artifactId", this.Configuration.ApiClient.ParameterToString(maven2ArtifactId)); // form parameter
            if (maven2Version != null) localVarFormParams.Add("maven2.version", this.Configuration.ApiClient.ParameterToString(maven2Version)); // form parameter
            if (maven2GeneratePom != null) localVarFormParams.Add("maven2.generate-pom", this.Configuration.ApiClient.ParameterToString(maven2GeneratePom)); // form parameter
            if (maven2Packaging != null) localVarFormParams.Add("maven2.packaging", this.Configuration.ApiClient.ParameterToString(maven2Packaging)); // form parameter
            if (maven2Asset1 != null) localVarFileParams.Add("maven2.asset1", this.Configuration.ApiClient.ParameterToFile("maven2.asset1", maven2Asset1));
            if (maven2Asset1Classifier != null) localVarFormParams.Add("maven2.asset1.classifier", this.Configuration.ApiClient.ParameterToString(maven2Asset1Classifier)); // form parameter
            if (maven2Asset1Extension != null) localVarFormParams.Add("maven2.asset1.extension", this.Configuration.ApiClient.ParameterToString(maven2Asset1Extension)); // form parameter
            if (maven2Asset2 != null) localVarFileParams.Add("maven2.asset2", this.Configuration.ApiClient.ParameterToFile("maven2.asset2", maven2Asset2));
            if (maven2Asset2Classifier != null) localVarFormParams.Add("maven2.asset2.classifier", this.Configuration.ApiClient.ParameterToString(maven2Asset2Classifier)); // form parameter
            if (maven2Asset2Extension != null) localVarFormParams.Add("maven2.asset2.extension", this.Configuration.ApiClient.ParameterToString(maven2Asset2Extension)); // form parameter
            if (maven2Asset3 != null) localVarFileParams.Add("maven2.asset3", this.Configuration.ApiClient.ParameterToFile("maven2.asset3", maven2Asset3));
            if (maven2Asset3Classifier != null) localVarFormParams.Add("maven2.asset3.classifier", this.Configuration.ApiClient.ParameterToString(maven2Asset3Classifier)); // form parameter
            if (maven2Asset3Extension != null) localVarFormParams.Add("maven2.asset3.extension", this.Configuration.ApiClient.ParameterToString(maven2Asset3Extension)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadComponent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
