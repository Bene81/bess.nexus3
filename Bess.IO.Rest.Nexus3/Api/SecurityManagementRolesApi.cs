/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Bess.IO.Rest.Nexus3.Client;
using Bess.IO.Rest.Nexus3.Model;

namespace Bess.IO.Rest.Nexus3.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityManagementRolesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A role configuration</param>
        /// <returns>RoleXOResponse</returns>
        RoleXOResponse Create (RoleXORequest body);

        /// <summary>
        /// Create role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A role configuration</param>
        /// <returns>ApiResponse of RoleXOResponse</returns>
        ApiResponse<RoleXOResponse> CreateWithHttpInfo (RoleXORequest body);
        /// <summary>
        /// Delete role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to delete</param>
        /// <returns></returns>
        void Delete (string id);

        /// <summary>
        /// Delete role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string id);
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to get</param>
        /// <param name="source">The id of the user source to filter the roles by. Available sources can be fetched using the &#39;User Sources&#39; endpoint. (optional, default to default)</param>
        /// <returns>RoleXOResponse</returns>
        RoleXOResponse GetRole (string id, string source = null);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to get</param>
        /// <param name="source">The id of the user source to filter the roles by. Available sources can be fetched using the &#39;User Sources&#39; endpoint. (optional, default to default)</param>
        /// <returns>ApiResponse of RoleXOResponse</returns>
        ApiResponse<RoleXOResponse> GetRoleWithHttpInfo (string id, string source = null);
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned. (optional)</param>
        /// <returns>List&lt;RoleXOResponse&gt;</returns>
        List<RoleXOResponse> GetRoles (string source = null);

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;RoleXOResponse&gt;</returns>
        ApiResponse<List<RoleXOResponse>> GetRolesWithHttpInfo (string source = null);
        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to update</param>
        /// <param name="body">A role configuration</param>
        /// <returns></returns>
        void Update1 (string id, RoleXORequest body);

        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to update</param>
        /// <param name="body">A role configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Update1WithHttpInfo (string id, RoleXORequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A role configuration</param>
        /// <returns>Task of RoleXOResponse</returns>
        System.Threading.Tasks.Task<RoleXOResponse> CreateAsync (RoleXORequest body);

        /// <summary>
        /// Create role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A role configuration</param>
        /// <returns>Task of ApiResponse (RoleXOResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleXOResponse>> CreateAsyncWithHttpInfo (RoleXORequest body);
        /// <summary>
        /// Delete role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string id);

        /// <summary>
        /// Delete role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to get</param>
        /// <param name="source">The id of the user source to filter the roles by. Available sources can be fetched using the &#39;User Sources&#39; endpoint. (optional, default to default)</param>
        /// <returns>Task of RoleXOResponse</returns>
        System.Threading.Tasks.Task<RoleXOResponse> GetRoleAsync (string id, string source = null);

        /// <summary>
        /// Get role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to get</param>
        /// <param name="source">The id of the user source to filter the roles by. Available sources can be fetched using the &#39;User Sources&#39; endpoint. (optional, default to default)</param>
        /// <returns>Task of ApiResponse (RoleXOResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleXOResponse>> GetRoleAsyncWithHttpInfo (string id, string source = null);
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned. (optional)</param>
        /// <returns>Task of List&lt;RoleXOResponse&gt;</returns>
        System.Threading.Tasks.Task<List<RoleXOResponse>> GetRolesAsync (string source = null);

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RoleXOResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RoleXOResponse>>> GetRolesAsyncWithHttpInfo (string source = null);
        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to update</param>
        /// <param name="body">A role configuration</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Update1Async (string id, RoleXORequest body);

        /// <summary>
        /// Update role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to update</param>
        /// <param name="body">A role configuration</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Update1AsyncWithHttpInfo (string id, RoleXORequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurityManagementRolesApi : ISecurityManagementRolesApi
    {
        private Bess.IO.Rest.Nexus3.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityManagementRolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityManagementRolesApi(String basePath)
        {
            this.Configuration = new Bess.IO.Rest.Nexus3.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Bess.IO.Rest.Nexus3.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityManagementRolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurityManagementRolesApi(Bess.IO.Rest.Nexus3.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Bess.IO.Rest.Nexus3.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Bess.IO.Rest.Nexus3.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Bess.IO.Rest.Nexus3.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bess.IO.Rest.Nexus3.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A role configuration</param>
        /// <returns>RoleXOResponse</returns>
        public RoleXOResponse Create (RoleXORequest body)
        {
             ApiResponse<RoleXOResponse> localVarResponse = CreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A role configuration</param>
        /// <returns>ApiResponse of RoleXOResponse</returns>
        public ApiResponse< RoleXOResponse > CreateWithHttpInfo (RoleXORequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SecurityManagementRolesApi->Create");

            var localVarPath = "./v1/security/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleXOResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RoleXOResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleXOResponse)));
        }

        /// <summary>
        /// Create role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A role configuration</param>
        /// <returns>Task of RoleXOResponse</returns>
        public async System.Threading.Tasks.Task<RoleXOResponse> CreateAsync (RoleXORequest body)
        {
             ApiResponse<RoleXOResponse> localVarResponse = await CreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">A role configuration</param>
        /// <returns>Task of ApiResponse (RoleXOResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleXOResponse>> CreateAsyncWithHttpInfo (RoleXORequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SecurityManagementRolesApi->Create");

            var localVarPath = "./v1/security/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleXOResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RoleXOResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleXOResponse)));
        }

        /// <summary>
        /// Delete role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to delete</param>
        /// <returns></returns>
        public void Delete (string id)
        {
             DeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SecurityManagementRolesApi->Delete");

            var localVarPath = "./v1/security/roles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string id)
        {
             await DeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SecurityManagementRolesApi->Delete");

            var localVarPath = "./v1/security/roles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to get</param>
        /// <param name="source">The id of the user source to filter the roles by. Available sources can be fetched using the &#39;User Sources&#39; endpoint. (optional, default to default)</param>
        /// <returns>RoleXOResponse</returns>
        public RoleXOResponse GetRole (string id, string source = null)
        {
             ApiResponse<RoleXOResponse> localVarResponse = GetRoleWithHttpInfo(id, source);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to get</param>
        /// <param name="source">The id of the user source to filter the roles by. Available sources can be fetched using the &#39;User Sources&#39; endpoint. (optional, default to default)</param>
        /// <returns>ApiResponse of RoleXOResponse</returns>
        public ApiResponse< RoleXOResponse > GetRoleWithHttpInfo (string id, string source = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SecurityManagementRolesApi->GetRole");

            var localVarPath = "./v1/security/roles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleXOResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RoleXOResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleXOResponse)));
        }

        /// <summary>
        /// Get role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to get</param>
        /// <param name="source">The id of the user source to filter the roles by. Available sources can be fetched using the &#39;User Sources&#39; endpoint. (optional, default to default)</param>
        /// <returns>Task of RoleXOResponse</returns>
        public async System.Threading.Tasks.Task<RoleXOResponse> GetRoleAsync (string id, string source = null)
        {
             ApiResponse<RoleXOResponse> localVarResponse = await GetRoleAsyncWithHttpInfo(id, source);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to get</param>
        /// <param name="source">The id of the user source to filter the roles by. Available sources can be fetched using the &#39;User Sources&#39; endpoint. (optional, default to default)</param>
        /// <returns>Task of ApiResponse (RoleXOResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleXOResponse>> GetRoleAsyncWithHttpInfo (string id, string source = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SecurityManagementRolesApi->GetRole");

            var localVarPath = "./v1/security/roles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleXOResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RoleXOResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleXOResponse)));
        }

        /// <summary>
        /// List roles 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned. (optional)</param>
        /// <returns>List&lt;RoleXOResponse&gt;</returns>
        public List<RoleXOResponse> GetRoles (string source = null)
        {
             ApiResponse<List<RoleXOResponse>> localVarResponse = GetRolesWithHttpInfo(source);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List roles 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;RoleXOResponse&gt;</returns>
        public ApiResponse< List<RoleXOResponse> > GetRolesWithHttpInfo (string source = null)
        {

            var localVarPath = "./v1/security/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleXOResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<RoleXOResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleXOResponse>)));
        }

        /// <summary>
        /// List roles 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned. (optional)</param>
        /// <returns>Task of List&lt;RoleXOResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<RoleXOResponse>> GetRolesAsync (string source = null)
        {
             ApiResponse<List<RoleXOResponse>> localVarResponse = await GetRolesAsyncWithHttpInfo(source);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List roles 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">The id of the user source to filter the roles by, if supplied. Otherwise roles from all user sources will be returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RoleXOResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RoleXOResponse>>> GetRolesAsyncWithHttpInfo (string source = null)
        {

            var localVarPath = "./v1/security/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source", source)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleXOResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (List<RoleXOResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleXOResponse>)));
        }

        /// <summary>
        /// Update role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to update</param>
        /// <param name="body">A role configuration</param>
        /// <returns></returns>
        public void Update1 (string id, RoleXORequest body)
        {
             Update1WithHttpInfo(id, body);
        }

        /// <summary>
        /// Update role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to update</param>
        /// <param name="body">A role configuration</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> Update1WithHttpInfo (string id, RoleXORequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SecurityManagementRolesApi->Update1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SecurityManagementRolesApi->Update1");

            var localVarPath = "./v1/security/roles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to update</param>
        /// <param name="body">A role configuration</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Update1Async (string id, RoleXORequest body)
        {
             await Update1AsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Update role 
        /// </summary>
        /// <exception cref="Bess.IO.Rest.Nexus3.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the role to update</param>
        /// <param name="body">A role configuration</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> Update1AsyncWithHttpInfo (string id, RoleXORequest body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SecurityManagementRolesApi->Update1");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SecurityManagementRolesApi->Update1");

            var localVarPath = "./v1/security/roles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
