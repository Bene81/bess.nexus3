/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// DockerGroupApiRepository
    /// </summary>
    [DataContract]
    public partial class DockerGroupApiRepository :  IEquatable<DockerGroupApiRepository>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerGroupApiRepository" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DockerGroupApiRepository() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerGroupApiRepository" /> class.
        /// </summary>
        /// <param name="name">A unique identifier for this repository.</param>
        /// <param name="online">Whether this repository accepts incoming requests (required).</param>
        /// <param name="storage">storage (required).</param>
        /// <param name="group">group (required).</param>
        /// <param name="docker">docker (required).</param>
        public DockerGroupApiRepository(string name = default(string), bool? online = default(bool?), StorageAttributes storage = default(StorageAttributes), GroupDeployAttributes group = default(GroupDeployAttributes), DockerAttributes docker = default(DockerAttributes))
        {
            // to ensure "online" is required (not null)
            if (online == null)
            {
                throw new InvalidDataException("online is a required property for DockerGroupApiRepository and cannot be null");
            }
            else
            {
                this.Online = online;
            }
            // to ensure "storage" is required (not null)
            if (storage == null)
            {
                throw new InvalidDataException("storage is a required property for DockerGroupApiRepository and cannot be null");
            }
            else
            {
                this.Storage = storage;
            }
            // to ensure "group" is required (not null)
            if (group == null)
            {
                throw new InvalidDataException("group is a required property for DockerGroupApiRepository and cannot be null");
            }
            else
            {
                this.Group = group;
            }
            // to ensure "docker" is required (not null)
            if (docker == null)
            {
                throw new InvalidDataException("docker is a required property for DockerGroupApiRepository and cannot be null");
            }
            else
            {
                this.Docker = docker;
            }
            this.Name = name;
        }
        
        /// <summary>
        /// A unique identifier for this repository
        /// </summary>
        /// <value>A unique identifier for this repository</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether this repository accepts incoming requests
        /// </summary>
        /// <value>Whether this repository accepts incoming requests</value>
        [DataMember(Name="online", EmitDefaultValue=false)]
        public bool? Online { get; set; }

        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name="storage", EmitDefaultValue=false)]
        public StorageAttributes Storage { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public GroupDeployAttributes Group { get; set; }

        /// <summary>
        /// Gets or Sets Docker
        /// </summary>
        [DataMember(Name="docker", EmitDefaultValue=false)]
        public DockerAttributes Docker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DockerGroupApiRepository {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Docker: ").Append(Docker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DockerGroupApiRepository);
        }

        /// <summary>
        /// Returns true if DockerGroupApiRepository instances are equal
        /// </summary>
        /// <param name="input">Instance of DockerGroupApiRepository to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DockerGroupApiRepository input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Online == input.Online ||
                    (this.Online != null &&
                    this.Online.Equals(input.Online))
                ) && 
                (
                    this.Storage == input.Storage ||
                    (this.Storage != null &&
                    this.Storage.Equals(input.Storage))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Docker == input.Docker ||
                    (this.Docker != null &&
                    this.Docker.Equals(input.Docker))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Online != null)
                    hashCode = hashCode * 59 + this.Online.GetHashCode();
                if (this.Storage != null)
                    hashCode = hashCode * 59 + this.Storage.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Docker != null)
                    hashCode = hashCode * 59 + this.Docker.GetHashCode();
                return hashCode;
            }
        }
    }

}
