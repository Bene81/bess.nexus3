/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// UploadDefinitionXO
    /// </summary>
    [DataContract]
    public partial class UploadDefinitionXO :  IEquatable<UploadDefinitionXO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadDefinitionXO" /> class.
        /// </summary>
        /// <param name="format">format.</param>
        /// <param name="multipleUpload">multipleUpload.</param>
        /// <param name="componentFields">componentFields.</param>
        /// <param name="assetFields">assetFields.</param>
        public UploadDefinitionXO(string format = default(string), bool? multipleUpload = default(bool?), List<UploadFieldDefinitionXO> componentFields = default(List<UploadFieldDefinitionXO>), List<UploadFieldDefinitionXO> assetFields = default(List<UploadFieldDefinitionXO>))
        {
            this.Format = format;
            this.MultipleUpload = multipleUpload;
            this.ComponentFields = componentFields;
            this.AssetFields = assetFields;
        }
        
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets MultipleUpload
        /// </summary>
        [DataMember(Name="multipleUpload", EmitDefaultValue=false)]
        public bool? MultipleUpload { get; set; }

        /// <summary>
        /// Gets or Sets ComponentFields
        /// </summary>
        [DataMember(Name="componentFields", EmitDefaultValue=false)]
        public List<UploadFieldDefinitionXO> ComponentFields { get; set; }

        /// <summary>
        /// Gets or Sets AssetFields
        /// </summary>
        [DataMember(Name="assetFields", EmitDefaultValue=false)]
        public List<UploadFieldDefinitionXO> AssetFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadDefinitionXO {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  MultipleUpload: ").Append(MultipleUpload).Append("\n");
            sb.Append("  ComponentFields: ").Append(ComponentFields).Append("\n");
            sb.Append("  AssetFields: ").Append(AssetFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadDefinitionXO);
        }

        /// <summary>
        /// Returns true if UploadDefinitionXO instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadDefinitionXO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadDefinitionXO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.MultipleUpload == input.MultipleUpload ||
                    (this.MultipleUpload != null &&
                    this.MultipleUpload.Equals(input.MultipleUpload))
                ) && 
                (
                    this.ComponentFields == input.ComponentFields ||
                    this.ComponentFields != null &&
                    this.ComponentFields.SequenceEqual(input.ComponentFields)
                ) && 
                (
                    this.AssetFields == input.AssetFields ||
                    this.AssetFields != null &&
                    this.AssetFields.SequenceEqual(input.AssetFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.MultipleUpload != null)
                    hashCode = hashCode * 59 + this.MultipleUpload.GetHashCode();
                if (this.ComponentFields != null)
                    hashCode = hashCode * 59 + this.ComponentFields.GetHashCode();
                if (this.AssetFields != null)
                    hashCode = hashCode * 59 + this.AssetFields.GetHashCode();
                return hashCode;
            }
        }
    }

}
