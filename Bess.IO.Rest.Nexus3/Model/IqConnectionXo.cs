/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// IqConnectionXo
    /// </summary>
    [DataContract]
    public partial class IqConnectionXo :  IEquatable<IqConnectionXo>
    {
        /// <summary>
        /// Authentication method
        /// </summary>
        /// <value>Authentication method</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationTypeEnum
        {
            
            /// <summary>
            /// Enum USER for value: USER
            /// </summary>
            [EnumMember(Value = "USER")]
            USER = 1,
            
            /// <summary>
            /// Enum PKI for value: PKI
            /// </summary>
            [EnumMember(Value = "PKI")]
            PKI = 2
        }

        /// <summary>
        /// Authentication method
        /// </summary>
        /// <value>Authentication method</value>
        [DataMember(Name="authenticationType", EmitDefaultValue=false)]
        public AuthenticationTypeEnum AuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IqConnectionXo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IqConnectionXo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IqConnectionXo" /> class.
        /// </summary>
        /// <param name="enabled">Whether to use IQ Server.</param>
        /// <param name="showLink">Show IQ Server link in Browse menu when server is enabled.</param>
        /// <param name="url">The address of your IQ Server.</param>
        /// <param name="authenticationType">Authentication method (required).</param>
        /// <param name="username">User with access to IQ Server.</param>
        /// <param name="password">Credentials for the IQ Server User.</param>
        /// <param name="useTrustStoreForUrl">Use certificates stored in the Nexus Repository Manager truststore to connect to IQ Server.</param>
        /// <param name="timeoutSeconds">Seconds to wait for activity before stopping and retrying the connection. Leave blank to use the globally defined HTTP timeout..</param>
        /// <param name="properties">Additional properties to configure for IQ Server.</param>
        public IqConnectionXo(bool? enabled = default(bool?), bool? showLink = default(bool?), string url = default(string), AuthenticationTypeEnum authenticationType = default(AuthenticationTypeEnum), string username = default(string), string password = default(string), bool? useTrustStoreForUrl = default(bool?), int? timeoutSeconds = default(int?), string properties = default(string))
        {
            // to ensure "authenticationType" is required (not null)
            if (authenticationType == null)
            {
                throw new InvalidDataException("authenticationType is a required property for IqConnectionXo and cannot be null");
            }
            else
            {
                this.AuthenticationType = authenticationType;
            }
            this.Enabled = enabled;
            this.ShowLink = showLink;
            this.Url = url;
            this.Username = username;
            this.Password = password;
            this.UseTrustStoreForUrl = useTrustStoreForUrl;
            this.TimeoutSeconds = timeoutSeconds;
            this.Properties = properties;
        }
        
        /// <summary>
        /// Whether to use IQ Server
        /// </summary>
        /// <value>Whether to use IQ Server</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Show IQ Server link in Browse menu when server is enabled
        /// </summary>
        /// <value>Show IQ Server link in Browse menu when server is enabled</value>
        [DataMember(Name="showLink", EmitDefaultValue=false)]
        public bool? ShowLink { get; set; }

        /// <summary>
        /// The address of your IQ Server
        /// </summary>
        /// <value>The address of your IQ Server</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }


        /// <summary>
        /// User with access to IQ Server
        /// </summary>
        /// <value>User with access to IQ Server</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Credentials for the IQ Server User
        /// </summary>
        /// <value>Credentials for the IQ Server User</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Use certificates stored in the Nexus Repository Manager truststore to connect to IQ Server
        /// </summary>
        /// <value>Use certificates stored in the Nexus Repository Manager truststore to connect to IQ Server</value>
        [DataMember(Name="useTrustStoreForUrl", EmitDefaultValue=false)]
        public bool? UseTrustStoreForUrl { get; set; }

        /// <summary>
        /// Seconds to wait for activity before stopping and retrying the connection. Leave blank to use the globally defined HTTP timeout.
        /// </summary>
        /// <value>Seconds to wait for activity before stopping and retrying the connection. Leave blank to use the globally defined HTTP timeout.</value>
        [DataMember(Name="timeoutSeconds", EmitDefaultValue=false)]
        public int? TimeoutSeconds { get; set; }

        /// <summary>
        /// Additional properties to configure for IQ Server
        /// </summary>
        /// <value>Additional properties to configure for IQ Server</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public string Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IqConnectionXo {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ShowLink: ").Append(ShowLink).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  UseTrustStoreForUrl: ").Append(UseTrustStoreForUrl).Append("\n");
            sb.Append("  TimeoutSeconds: ").Append(TimeoutSeconds).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IqConnectionXo);
        }

        /// <summary>
        /// Returns true if IqConnectionXo instances are equal
        /// </summary>
        /// <param name="input">Instance of IqConnectionXo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IqConnectionXo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.ShowLink == input.ShowLink ||
                    (this.ShowLink != null &&
                    this.ShowLink.Equals(input.ShowLink))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    (this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(input.AuthenticationType))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.UseTrustStoreForUrl == input.UseTrustStoreForUrl ||
                    (this.UseTrustStoreForUrl != null &&
                    this.UseTrustStoreForUrl.Equals(input.UseTrustStoreForUrl))
                ) && 
                (
                    this.TimeoutSeconds == input.TimeoutSeconds ||
                    (this.TimeoutSeconds != null &&
                    this.TimeoutSeconds.Equals(input.TimeoutSeconds))
                ) && 
                (
                    this.Properties == input.Properties ||
                    (this.Properties != null &&
                    this.Properties.Equals(input.Properties))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.ShowLink != null)
                    hashCode = hashCode * 59 + this.ShowLink.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.AuthenticationType != null)
                    hashCode = hashCode * 59 + this.AuthenticationType.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.UseTrustStoreForUrl != null)
                    hashCode = hashCode * 59 + this.UseTrustStoreForUrl.GetHashCode();
                if (this.TimeoutSeconds != null)
                    hashCode = hashCode * 59 + this.TimeoutSeconds.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }
    }

}
