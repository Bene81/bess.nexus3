/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// S3BlobStoreApiModel
    /// </summary>
    [DataContract]
    public partial class S3BlobStoreApiModel :  IEquatable<S3BlobStoreApiModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="S3BlobStoreApiModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected S3BlobStoreApiModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="S3BlobStoreApiModel" /> class.
        /// </summary>
        /// <param name="name">The name of the S3 blob store. (required).</param>
        /// <param name="softQuota">Settings to control the soft quota..</param>
        /// <param name="bucketConfiguration">The S3 specific configuration details for the S3 object that&#39;ll contain the blob store. (required).</param>
        public S3BlobStoreApiModel(string name = default(string), BlobStoreApiSoftQuota softQuota = default(BlobStoreApiSoftQuota), S3BlobStoreApiBucketConfiguration bucketConfiguration = default(S3BlobStoreApiBucketConfiguration))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for S3BlobStoreApiModel and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "bucketConfiguration" is required (not null)
            if (bucketConfiguration == null)
            {
                throw new InvalidDataException("bucketConfiguration is a required property for S3BlobStoreApiModel and cannot be null");
            }
            else
            {
                this.BucketConfiguration = bucketConfiguration;
            }
            this.SoftQuota = softQuota;
        }
        
        /// <summary>
        /// The name of the S3 blob store.
        /// </summary>
        /// <value>The name of the S3 blob store.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Settings to control the soft quota.
        /// </summary>
        /// <value>Settings to control the soft quota.</value>
        [DataMember(Name="softQuota", EmitDefaultValue=false)]
        public BlobStoreApiSoftQuota SoftQuota { get; set; }

        /// <summary>
        /// The S3 specific configuration details for the S3 object that&#39;ll contain the blob store.
        /// </summary>
        /// <value>The S3 specific configuration details for the S3 object that&#39;ll contain the blob store.</value>
        [DataMember(Name="bucketConfiguration", EmitDefaultValue=false)]
        public S3BlobStoreApiBucketConfiguration BucketConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class S3BlobStoreApiModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SoftQuota: ").Append(SoftQuota).Append("\n");
            sb.Append("  BucketConfiguration: ").Append(BucketConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as S3BlobStoreApiModel);
        }

        /// <summary>
        /// Returns true if S3BlobStoreApiModel instances are equal
        /// </summary>
        /// <param name="input">Instance of S3BlobStoreApiModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(S3BlobStoreApiModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SoftQuota == input.SoftQuota ||
                    (this.SoftQuota != null &&
                    this.SoftQuota.Equals(input.SoftQuota))
                ) && 
                (
                    this.BucketConfiguration == input.BucketConfiguration ||
                    (this.BucketConfiguration != null &&
                    this.BucketConfiguration.Equals(input.BucketConfiguration))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SoftQuota != null)
                    hashCode = hashCode * 59 + this.SoftQuota.GetHashCode();
                if (this.BucketConfiguration != null)
                    hashCode = hashCode * 59 + this.BucketConfiguration.GetHashCode();
                return hashCode;
            }
        }
    }

}
