/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// AnonymousAccessSettingsXO
    /// </summary>
    [DataContract]
    public partial class AnonymousAccessSettingsXO :  IEquatable<AnonymousAccessSettingsXO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnonymousAccessSettingsXO" /> class.
        /// </summary>
        /// <param name="enabled">Whether or not Anonymous Access is enabled.</param>
        /// <param name="userId">The username of the anonymous account.</param>
        /// <param name="realmName">The name of the authentication realm for the anonymous account.</param>
        public AnonymousAccessSettingsXO(bool? enabled = default(bool?), string userId = default(string), string realmName = default(string))
        {
            this.Enabled = enabled;
            this.UserId = userId;
            this.RealmName = realmName;
        }
        
        /// <summary>
        /// Whether or not Anonymous Access is enabled
        /// </summary>
        /// <value>Whether or not Anonymous Access is enabled</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// The username of the anonymous account
        /// </summary>
        /// <value>The username of the anonymous account</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// The name of the authentication realm for the anonymous account
        /// </summary>
        /// <value>The name of the authentication realm for the anonymous account</value>
        [DataMember(Name="realmName", EmitDefaultValue=false)]
        public string RealmName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnonymousAccessSettingsXO {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  RealmName: ").Append(RealmName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnonymousAccessSettingsXO);
        }

        /// <summary>
        /// Returns true if AnonymousAccessSettingsXO instances are equal
        /// </summary>
        /// <param name="input">Instance of AnonymousAccessSettingsXO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnonymousAccessSettingsXO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.RealmName == input.RealmName ||
                    (this.RealmName != null &&
                    this.RealmName.Equals(input.RealmName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.RealmName != null)
                    hashCode = hashCode * 59 + this.RealmName.GetHashCode();
                return hashCode;
            }
        }
    }

}
