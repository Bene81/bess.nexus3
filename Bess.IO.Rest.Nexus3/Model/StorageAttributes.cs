/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// StorageAttributes
    /// </summary>
    [DataContract]
    public partial class StorageAttributes :  IEquatable<StorageAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorageAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageAttributes" /> class.
        /// </summary>
        /// <param name="blobStoreName">Blob store used to store repository contents.</param>
        /// <param name="strictContentTypeValidation">Whether to validate uploaded content&#39;s MIME type appropriate for the repository format (required).</param>
        public StorageAttributes(string blobStoreName = default(string), bool? strictContentTypeValidation = default(bool?))
        {
            // to ensure "strictContentTypeValidation" is required (not null)
            if (strictContentTypeValidation == null)
            {
                throw new InvalidDataException("strictContentTypeValidation is a required property for StorageAttributes and cannot be null");
            }
            else
            {
                this.StrictContentTypeValidation = strictContentTypeValidation;
            }
            this.BlobStoreName = blobStoreName;
        }
        
        /// <summary>
        /// Blob store used to store repository contents
        /// </summary>
        /// <value>Blob store used to store repository contents</value>
        [DataMember(Name="blobStoreName", EmitDefaultValue=false)]
        public string BlobStoreName { get; set; }

        /// <summary>
        /// Whether to validate uploaded content&#39;s MIME type appropriate for the repository format
        /// </summary>
        /// <value>Whether to validate uploaded content&#39;s MIME type appropriate for the repository format</value>
        [DataMember(Name="strictContentTypeValidation", EmitDefaultValue=false)]
        public bool? StrictContentTypeValidation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageAttributes {\n");
            sb.Append("  BlobStoreName: ").Append(BlobStoreName).Append("\n");
            sb.Append("  StrictContentTypeValidation: ").Append(StrictContentTypeValidation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageAttributes);
        }

        /// <summary>
        /// Returns true if StorageAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BlobStoreName == input.BlobStoreName ||
                    (this.BlobStoreName != null &&
                    this.BlobStoreName.Equals(input.BlobStoreName))
                ) && 
                (
                    this.StrictContentTypeValidation == input.StrictContentTypeValidation ||
                    (this.StrictContentTypeValidation != null &&
                    this.StrictContentTypeValidation.Equals(input.StrictContentTypeValidation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BlobStoreName != null)
                    hashCode = hashCode * 59 + this.BlobStoreName.GetHashCode();
                if (this.StrictContentTypeValidation != null)
                    hashCode = hashCode * 59 + this.StrictContentTypeValidation.GetHashCode();
                return hashCode;
            }
        }
    }

}
