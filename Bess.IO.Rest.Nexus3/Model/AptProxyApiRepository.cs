/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// AptProxyApiRepository
    /// </summary>
    [DataContract]
    public partial class AptProxyApiRepository :  IEquatable<AptProxyApiRepository>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AptProxyApiRepository" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AptProxyApiRepository() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AptProxyApiRepository" /> class.
        /// </summary>
        /// <param name="name">A unique identifier for this repository.</param>
        /// <param name="online">Whether this repository accepts incoming requests (required).</param>
        /// <param name="storage">storage (required).</param>
        /// <param name="cleanup">cleanup.</param>
        /// <param name="proxy">proxy (required).</param>
        /// <param name="negativeCache">negativeCache (required).</param>
        /// <param name="httpClient">httpClient (required).</param>
        /// <param name="routingRuleName">The name of the routing rule assigned to this repository.</param>
        /// <param name="apt">apt (required).</param>
        public AptProxyApiRepository(string name = default(string), bool? online = default(bool?), StorageAttributes storage = default(StorageAttributes), CleanupPolicyAttributes cleanup = default(CleanupPolicyAttributes), ProxyAttributes proxy = default(ProxyAttributes), NegativeCacheAttributes negativeCache = default(NegativeCacheAttributes), HttpClientAttributes httpClient = default(HttpClientAttributes), string routingRuleName = default(string), AptProxyRepositoriesAttributes apt = default(AptProxyRepositoriesAttributes))
        {
            // to ensure "online" is required (not null)
            if (online == null)
            {
                throw new InvalidDataException("online is a required property for AptProxyApiRepository and cannot be null");
            }
            else
            {
                this.Online = online;
            }
            // to ensure "storage" is required (not null)
            if (storage == null)
            {
                throw new InvalidDataException("storage is a required property for AptProxyApiRepository and cannot be null");
            }
            else
            {
                this.Storage = storage;
            }
            // to ensure "proxy" is required (not null)
            if (proxy == null)
            {
                throw new InvalidDataException("proxy is a required property for AptProxyApiRepository and cannot be null");
            }
            else
            {
                this.Proxy = proxy;
            }
            // to ensure "negativeCache" is required (not null)
            if (negativeCache == null)
            {
                throw new InvalidDataException("negativeCache is a required property for AptProxyApiRepository and cannot be null");
            }
            else
            {
                this.NegativeCache = negativeCache;
            }
            // to ensure "httpClient" is required (not null)
            if (httpClient == null)
            {
                throw new InvalidDataException("httpClient is a required property for AptProxyApiRepository and cannot be null");
            }
            else
            {
                this.HttpClient = httpClient;
            }
            // to ensure "apt" is required (not null)
            if (apt == null)
            {
                throw new InvalidDataException("apt is a required property for AptProxyApiRepository and cannot be null");
            }
            else
            {
                this.Apt = apt;
            }
            this.Name = name;
            this.Cleanup = cleanup;
            this.RoutingRuleName = routingRuleName;
        }
        
        /// <summary>
        /// A unique identifier for this repository
        /// </summary>
        /// <value>A unique identifier for this repository</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether this repository accepts incoming requests
        /// </summary>
        /// <value>Whether this repository accepts incoming requests</value>
        [DataMember(Name="online", EmitDefaultValue=false)]
        public bool? Online { get; set; }

        /// <summary>
        /// Gets or Sets Storage
        /// </summary>
        [DataMember(Name="storage", EmitDefaultValue=false)]
        public StorageAttributes Storage { get; set; }

        /// <summary>
        /// Gets or Sets Cleanup
        /// </summary>
        [DataMember(Name="cleanup", EmitDefaultValue=false)]
        public CleanupPolicyAttributes Cleanup { get; set; }

        /// <summary>
        /// Gets or Sets Proxy
        /// </summary>
        [DataMember(Name="proxy", EmitDefaultValue=false)]
        public ProxyAttributes Proxy { get; set; }

        /// <summary>
        /// Gets or Sets NegativeCache
        /// </summary>
        [DataMember(Name="negativeCache", EmitDefaultValue=false)]
        public NegativeCacheAttributes NegativeCache { get; set; }

        /// <summary>
        /// Gets or Sets HttpClient
        /// </summary>
        [DataMember(Name="httpClient", EmitDefaultValue=false)]
        public HttpClientAttributes HttpClient { get; set; }

        /// <summary>
        /// The name of the routing rule assigned to this repository
        /// </summary>
        /// <value>The name of the routing rule assigned to this repository</value>
        [DataMember(Name="routingRuleName", EmitDefaultValue=false)]
        public string RoutingRuleName { get; set; }

        /// <summary>
        /// Gets or Sets Apt
        /// </summary>
        [DataMember(Name="apt", EmitDefaultValue=false)]
        public AptProxyRepositoriesAttributes Apt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AptProxyApiRepository {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  Storage: ").Append(Storage).Append("\n");
            sb.Append("  Cleanup: ").Append(Cleanup).Append("\n");
            sb.Append("  Proxy: ").Append(Proxy).Append("\n");
            sb.Append("  NegativeCache: ").Append(NegativeCache).Append("\n");
            sb.Append("  HttpClient: ").Append(HttpClient).Append("\n");
            sb.Append("  RoutingRuleName: ").Append(RoutingRuleName).Append("\n");
            sb.Append("  Apt: ").Append(Apt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AptProxyApiRepository);
        }

        /// <summary>
        /// Returns true if AptProxyApiRepository instances are equal
        /// </summary>
        /// <param name="input">Instance of AptProxyApiRepository to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AptProxyApiRepository input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Online == input.Online ||
                    (this.Online != null &&
                    this.Online.Equals(input.Online))
                ) && 
                (
                    this.Storage == input.Storage ||
                    (this.Storage != null &&
                    this.Storage.Equals(input.Storage))
                ) && 
                (
                    this.Cleanup == input.Cleanup ||
                    (this.Cleanup != null &&
                    this.Cleanup.Equals(input.Cleanup))
                ) && 
                (
                    this.Proxy == input.Proxy ||
                    (this.Proxy != null &&
                    this.Proxy.Equals(input.Proxy))
                ) && 
                (
                    this.NegativeCache == input.NegativeCache ||
                    (this.NegativeCache != null &&
                    this.NegativeCache.Equals(input.NegativeCache))
                ) && 
                (
                    this.HttpClient == input.HttpClient ||
                    (this.HttpClient != null &&
                    this.HttpClient.Equals(input.HttpClient))
                ) && 
                (
                    this.RoutingRuleName == input.RoutingRuleName ||
                    (this.RoutingRuleName != null &&
                    this.RoutingRuleName.Equals(input.RoutingRuleName))
                ) && 
                (
                    this.Apt == input.Apt ||
                    (this.Apt != null &&
                    this.Apt.Equals(input.Apt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Online != null)
                    hashCode = hashCode * 59 + this.Online.GetHashCode();
                if (this.Storage != null)
                    hashCode = hashCode * 59 + this.Storage.GetHashCode();
                if (this.Cleanup != null)
                    hashCode = hashCode * 59 + this.Cleanup.GetHashCode();
                if (this.Proxy != null)
                    hashCode = hashCode * 59 + this.Proxy.GetHashCode();
                if (this.NegativeCache != null)
                    hashCode = hashCode * 59 + this.NegativeCache.GetHashCode();
                if (this.HttpClient != null)
                    hashCode = hashCode * 59 + this.HttpClient.GetHashCode();
                if (this.RoutingRuleName != null)
                    hashCode = hashCode * 59 + this.RoutingRuleName.GetHashCode();
                if (this.Apt != null)
                    hashCode = hashCode * 59 + this.Apt.GetHashCode();
                return hashCode;
            }
        }
    }

}
