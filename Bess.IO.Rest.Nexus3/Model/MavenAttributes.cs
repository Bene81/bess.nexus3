/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// MavenAttributes
    /// </summary>
    [DataContract]
    public partial class MavenAttributes :  IEquatable<MavenAttributes>
    {
        /// <summary>
        /// What type of artifacts does this repository store?
        /// </summary>
        /// <value>What type of artifacts does this repository store?</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VersionPolicyEnum
        {
            
            /// <summary>
            /// Enum RELEASE for value: RELEASE
            /// </summary>
            [EnumMember(Value = "RELEASE")]
            RELEASE = 1,
            
            /// <summary>
            /// Enum SNAPSHOT for value: SNAPSHOT
            /// </summary>
            [EnumMember(Value = "SNAPSHOT")]
            SNAPSHOT = 2,
            
            /// <summary>
            /// Enum MIXED for value: MIXED
            /// </summary>
            [EnumMember(Value = "MIXED")]
            MIXED = 3
        }

        /// <summary>
        /// What type of artifacts does this repository store?
        /// </summary>
        /// <value>What type of artifacts does this repository store?</value>
        [DataMember(Name="versionPolicy", EmitDefaultValue=false)]
        public VersionPolicyEnum? VersionPolicy { get; set; }
        /// <summary>
        /// Validate that all paths are maven artifact or metadata paths
        /// </summary>
        /// <value>Validate that all paths are maven artifact or metadata paths</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LayoutPolicyEnum
        {
            
            /// <summary>
            /// Enum STRICT for value: STRICT
            /// </summary>
            [EnumMember(Value = "STRICT")]
            STRICT = 1,
            
            /// <summary>
            /// Enum PERMISSIVE for value: PERMISSIVE
            /// </summary>
            [EnumMember(Value = "PERMISSIVE")]
            PERMISSIVE = 2
        }

        /// <summary>
        /// Validate that all paths are maven artifact or metadata paths
        /// </summary>
        /// <value>Validate that all paths are maven artifact or metadata paths</value>
        [DataMember(Name="layoutPolicy", EmitDefaultValue=false)]
        public LayoutPolicyEnum? LayoutPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MavenAttributes" /> class.
        /// </summary>
        /// <param name="versionPolicy">What type of artifacts does this repository store?.</param>
        /// <param name="layoutPolicy">Validate that all paths are maven artifact or metadata paths.</param>
        public MavenAttributes(VersionPolicyEnum? versionPolicy = default(VersionPolicyEnum?), LayoutPolicyEnum? layoutPolicy = default(LayoutPolicyEnum?))
        {
            this.VersionPolicy = versionPolicy;
            this.LayoutPolicy = layoutPolicy;
        }
        


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MavenAttributes {\n");
            sb.Append("  VersionPolicy: ").Append(VersionPolicy).Append("\n");
            sb.Append("  LayoutPolicy: ").Append(LayoutPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MavenAttributes);
        }

        /// <summary>
        /// Returns true if MavenAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of MavenAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MavenAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.VersionPolicy == input.VersionPolicy ||
                    (this.VersionPolicy != null &&
                    this.VersionPolicy.Equals(input.VersionPolicy))
                ) && 
                (
                    this.LayoutPolicy == input.LayoutPolicy ||
                    (this.LayoutPolicy != null &&
                    this.LayoutPolicy.Equals(input.LayoutPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionPolicy != null)
                    hashCode = hashCode * 59 + this.VersionPolicy.GetHashCode();
                if (this.LayoutPolicy != null)
                    hashCode = hashCode * 59 + this.LayoutPolicy.GetHashCode();
                return hashCode;
            }
        }
    }

}
