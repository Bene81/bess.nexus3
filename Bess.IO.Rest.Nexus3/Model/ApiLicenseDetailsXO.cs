/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// ApiLicenseDetailsXO
    /// </summary>
    [DataContract]
    public partial class ApiLicenseDetailsXO :  IEquatable<ApiLicenseDetailsXO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiLicenseDetailsXO" /> class.
        /// </summary>
        /// <param name="contactEmail">contactEmail.</param>
        /// <param name="contactCompany">contactCompany.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="licenseType">licenseType.</param>
        /// <param name="licensedUsers">licensedUsers.</param>
        /// <param name="fingerprint">fingerprint.</param>
        /// <param name="features">features.</param>
        public ApiLicenseDetailsXO(string contactEmail = default(string), string contactCompany = default(string), string contactName = default(string), DateTime? effectiveDate = default(DateTime?), DateTime? expirationDate = default(DateTime?), string licenseType = default(string), string licensedUsers = default(string), string fingerprint = default(string), string features = default(string))
        {
            this.ContactEmail = contactEmail;
            this.ContactCompany = contactCompany;
            this.ContactName = contactName;
            this.EffectiveDate = effectiveDate;
            this.ExpirationDate = expirationDate;
            this.LicenseType = licenseType;
            this.LicensedUsers = licensedUsers;
            this.Fingerprint = fingerprint;
            this.Features = features;
        }
        
        /// <summary>
        /// Gets or Sets ContactEmail
        /// </summary>
        [DataMember(Name="contactEmail", EmitDefaultValue=false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets ContactCompany
        /// </summary>
        [DataMember(Name="contactCompany", EmitDefaultValue=false)]
        public string ContactCompany { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name="contactName", EmitDefaultValue=false)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="licenseType", EmitDefaultValue=false)]
        public string LicenseType { get; set; }

        /// <summary>
        /// Gets or Sets LicensedUsers
        /// </summary>
        [DataMember(Name="licensedUsers", EmitDefaultValue=false)]
        public string LicensedUsers { get; set; }

        /// <summary>
        /// Gets or Sets Fingerprint
        /// </summary>
        [DataMember(Name="fingerprint", EmitDefaultValue=false)]
        public string Fingerprint { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name="features", EmitDefaultValue=false)]
        public string Features { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiLicenseDetailsXO {\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactCompany: ").Append(ContactCompany).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  LicensedUsers: ").Append(LicensedUsers).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiLicenseDetailsXO);
        }

        /// <summary>
        /// Returns true if ApiLicenseDetailsXO instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiLicenseDetailsXO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiLicenseDetailsXO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ContactCompany == input.ContactCompany ||
                    (this.ContactCompany != null &&
                    this.ContactCompany.Equals(input.ContactCompany))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.LicenseType == input.LicenseType ||
                    (this.LicenseType != null &&
                    this.LicenseType.Equals(input.LicenseType))
                ) && 
                (
                    this.LicensedUsers == input.LicensedUsers ||
                    (this.LicensedUsers != null &&
                    this.LicensedUsers.Equals(input.LicensedUsers))
                ) && 
                (
                    this.Fingerprint == input.Fingerprint ||
                    (this.Fingerprint != null &&
                    this.Fingerprint.Equals(input.Fingerprint))
                ) && 
                (
                    this.Features == input.Features ||
                    (this.Features != null &&
                    this.Features.Equals(input.Features))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.ContactCompany != null)
                    hashCode = hashCode * 59 + this.ContactCompany.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.LicenseType != null)
                    hashCode = hashCode * 59 + this.LicenseType.GetHashCode();
                if (this.LicensedUsers != null)
                    hashCode = hashCode * 59 + this.LicensedUsers.GetHashCode();
                if (this.Fingerprint != null)
                    hashCode = hashCode * 59 + this.Fingerprint.GetHashCode();
                if (this.Features != null)
                    hashCode = hashCode * 59 + this.Features.GetHashCode();
                return hashCode;
            }
        }
    }

}
