/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// AzureBlobStoreApiBucketConfiguration
    /// </summary>
    [DataContract]
    public partial class AzureBlobStoreApiBucketConfiguration :  IEquatable<AzureBlobStoreApiBucketConfiguration>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AzureBlobStoreApiBucketConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AzureBlobStoreApiBucketConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AzureBlobStoreApiBucketConfiguration" /> class.
        /// </summary>
        /// <param name="accountName">Account name found under Access keys for the storage account. (required).</param>
        /// <param name="containerName">The name of an existing container to be used for storage. (required).</param>
        /// <param name="authentication">The Azure specific authentication details. (required).</param>
        public AzureBlobStoreApiBucketConfiguration(string accountName = default(string), string containerName = default(string), AzureBlobStoreApiAuthentication authentication = default(AzureBlobStoreApiAuthentication))
        {
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new InvalidDataException("accountName is a required property for AzureBlobStoreApiBucketConfiguration and cannot be null");
            }
            else
            {
                this.AccountName = accountName;
            }
            // to ensure "containerName" is required (not null)
            if (containerName == null)
            {
                throw new InvalidDataException("containerName is a required property for AzureBlobStoreApiBucketConfiguration and cannot be null");
            }
            else
            {
                this.ContainerName = containerName;
            }
            // to ensure "authentication" is required (not null)
            if (authentication == null)
            {
                throw new InvalidDataException("authentication is a required property for AzureBlobStoreApiBucketConfiguration and cannot be null");
            }
            else
            {
                this.Authentication = authentication;
            }
        }
        
        /// <summary>
        /// Account name found under Access keys for the storage account.
        /// </summary>
        /// <value>Account name found under Access keys for the storage account.</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// The name of an existing container to be used for storage.
        /// </summary>
        /// <value>The name of an existing container to be used for storage.</value>
        [DataMember(Name="containerName", EmitDefaultValue=false)]
        public string ContainerName { get; set; }

        /// <summary>
        /// The Azure specific authentication details.
        /// </summary>
        /// <value>The Azure specific authentication details.</value>
        [DataMember(Name="authentication", EmitDefaultValue=false)]
        public AzureBlobStoreApiAuthentication Authentication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AzureBlobStoreApiBucketConfiguration {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ContainerName: ").Append(ContainerName).Append("\n");
            sb.Append("  Authentication: ").Append(Authentication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AzureBlobStoreApiBucketConfiguration);
        }

        /// <summary>
        /// Returns true if AzureBlobStoreApiBucketConfiguration instances are equal
        /// </summary>
        /// <param name="input">Instance of AzureBlobStoreApiBucketConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AzureBlobStoreApiBucketConfiguration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.ContainerName == input.ContainerName ||
                    (this.ContainerName != null &&
                    this.ContainerName.Equals(input.ContainerName))
                ) && 
                (
                    this.Authentication == input.Authentication ||
                    (this.Authentication != null &&
                    this.Authentication.Equals(input.Authentication))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.ContainerName != null)
                    hashCode = hashCode * 59 + this.ContainerName.GetHashCode();
                if (this.Authentication != null)
                    hashCode = hashCode * 59 + this.Authentication.GetHashCode();
                return hashCode;
            }
        }
    }

}
