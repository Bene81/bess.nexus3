/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// ProxyAttributes
    /// </summary>
    [DataContract]
    public partial class ProxyAttributes :  IEquatable<ProxyAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProxyAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProxyAttributes" /> class.
        /// </summary>
        /// <param name="remoteUrl">Location of the remote repository being proxied.</param>
        /// <param name="contentMaxAge">How long to cache artifacts before rechecking the remote repository (in minutes) (required).</param>
        /// <param name="metadataMaxAge">How long to cache metadata before rechecking the remote repository (in minutes) (required).</param>
        public ProxyAttributes(string remoteUrl = default(string), int? contentMaxAge = default(int?), int? metadataMaxAge = default(int?))
        {
            // to ensure "contentMaxAge" is required (not null)
            if (contentMaxAge == null)
            {
                throw new InvalidDataException("contentMaxAge is a required property for ProxyAttributes and cannot be null");
            }
            else
            {
                this.ContentMaxAge = contentMaxAge;
            }
            // to ensure "metadataMaxAge" is required (not null)
            if (metadataMaxAge == null)
            {
                throw new InvalidDataException("metadataMaxAge is a required property for ProxyAttributes and cannot be null");
            }
            else
            {
                this.MetadataMaxAge = metadataMaxAge;
            }
            this.RemoteUrl = remoteUrl;
        }
        
        /// <summary>
        /// Location of the remote repository being proxied
        /// </summary>
        /// <value>Location of the remote repository being proxied</value>
        [DataMember(Name="remoteUrl", EmitDefaultValue=false)]
        public string RemoteUrl { get; set; }

        /// <summary>
        /// How long to cache artifacts before rechecking the remote repository (in minutes)
        /// </summary>
        /// <value>How long to cache artifacts before rechecking the remote repository (in minutes)</value>
        [DataMember(Name="contentMaxAge", EmitDefaultValue=false)]
        public int? ContentMaxAge { get; set; }

        /// <summary>
        /// How long to cache metadata before rechecking the remote repository (in minutes)
        /// </summary>
        /// <value>How long to cache metadata before rechecking the remote repository (in minutes)</value>
        [DataMember(Name="metadataMaxAge", EmitDefaultValue=false)]
        public int? MetadataMaxAge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProxyAttributes {\n");
            sb.Append("  RemoteUrl: ").Append(RemoteUrl).Append("\n");
            sb.Append("  ContentMaxAge: ").Append(ContentMaxAge).Append("\n");
            sb.Append("  MetadataMaxAge: ").Append(MetadataMaxAge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProxyAttributes);
        }

        /// <summary>
        /// Returns true if ProxyAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of ProxyAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProxyAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RemoteUrl == input.RemoteUrl ||
                    (this.RemoteUrl != null &&
                    this.RemoteUrl.Equals(input.RemoteUrl))
                ) && 
                (
                    this.ContentMaxAge == input.ContentMaxAge ||
                    (this.ContentMaxAge != null &&
                    this.ContentMaxAge.Equals(input.ContentMaxAge))
                ) && 
                (
                    this.MetadataMaxAge == input.MetadataMaxAge ||
                    (this.MetadataMaxAge != null &&
                    this.MetadataMaxAge.Equals(input.MetadataMaxAge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RemoteUrl != null)
                    hashCode = hashCode * 59 + this.RemoteUrl.GetHashCode();
                if (this.ContentMaxAge != null)
                    hashCode = hashCode * 59 + this.ContentMaxAge.GetHashCode();
                if (this.MetadataMaxAge != null)
                    hashCode = hashCode * 59 + this.MetadataMaxAge.GetHashCode();
                return hashCode;
            }
        }
    }

}
