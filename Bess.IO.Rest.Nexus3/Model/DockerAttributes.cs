/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// DockerAttributes
    /// </summary>
    [DataContract]
    public partial class DockerAttributes :  IEquatable<DockerAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DockerAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerAttributes" /> class.
        /// </summary>
        /// <param name="v1Enabled">Whether to allow clients to use the V1 API to interact with this repository (required).</param>
        /// <param name="forceBasicAuth">Whether to force authentication (Docker Bearer Token Realm required if false) (required).</param>
        /// <param name="httpPort">Create an HTTP connector at specified port.</param>
        /// <param name="httpsPort">Create an HTTPS connector at specified port.</param>
        public DockerAttributes(bool? v1Enabled = default(bool?), bool? forceBasicAuth = default(bool?), int? httpPort = default(int?), int? httpsPort = default(int?))
        {
            // to ensure "v1Enabled" is required (not null)
            if (v1Enabled == null)
            {
                throw new InvalidDataException("v1Enabled is a required property for DockerAttributes and cannot be null");
            }
            else
            {
                this.V1Enabled = v1Enabled;
            }
            // to ensure "forceBasicAuth" is required (not null)
            if (forceBasicAuth == null)
            {
                throw new InvalidDataException("forceBasicAuth is a required property for DockerAttributes and cannot be null");
            }
            else
            {
                this.ForceBasicAuth = forceBasicAuth;
            }
            this.HttpPort = httpPort;
            this.HttpsPort = httpsPort;
        }
        
        /// <summary>
        /// Whether to allow clients to use the V1 API to interact with this repository
        /// </summary>
        /// <value>Whether to allow clients to use the V1 API to interact with this repository</value>
        [DataMember(Name="v1Enabled", EmitDefaultValue=false)]
        public bool? V1Enabled { get; set; }

        /// <summary>
        /// Whether to force authentication (Docker Bearer Token Realm required if false)
        /// </summary>
        /// <value>Whether to force authentication (Docker Bearer Token Realm required if false)</value>
        [DataMember(Name="forceBasicAuth", EmitDefaultValue=false)]
        public bool? ForceBasicAuth { get; set; }

        /// <summary>
        /// Create an HTTP connector at specified port
        /// </summary>
        /// <value>Create an HTTP connector at specified port</value>
        [DataMember(Name="httpPort", EmitDefaultValue=false)]
        public int? HttpPort { get; set; }

        /// <summary>
        /// Create an HTTPS connector at specified port
        /// </summary>
        /// <value>Create an HTTPS connector at specified port</value>
        [DataMember(Name="httpsPort", EmitDefaultValue=false)]
        public int? HttpsPort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DockerAttributes {\n");
            sb.Append("  V1Enabled: ").Append(V1Enabled).Append("\n");
            sb.Append("  ForceBasicAuth: ").Append(ForceBasicAuth).Append("\n");
            sb.Append("  HttpPort: ").Append(HttpPort).Append("\n");
            sb.Append("  HttpsPort: ").Append(HttpsPort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DockerAttributes);
        }

        /// <summary>
        /// Returns true if DockerAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of DockerAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DockerAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.V1Enabled == input.V1Enabled ||
                    (this.V1Enabled != null &&
                    this.V1Enabled.Equals(input.V1Enabled))
                ) && 
                (
                    this.ForceBasicAuth == input.ForceBasicAuth ||
                    (this.ForceBasicAuth != null &&
                    this.ForceBasicAuth.Equals(input.ForceBasicAuth))
                ) && 
                (
                    this.HttpPort == input.HttpPort ||
                    (this.HttpPort != null &&
                    this.HttpPort.Equals(input.HttpPort))
                ) && 
                (
                    this.HttpsPort == input.HttpsPort ||
                    (this.HttpsPort != null &&
                    this.HttpsPort.Equals(input.HttpsPort))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.V1Enabled != null)
                    hashCode = hashCode * 59 + this.V1Enabled.GetHashCode();
                if (this.ForceBasicAuth != null)
                    hashCode = hashCode * 59 + this.ForceBasicAuth.GetHashCode();
                if (this.HttpPort != null)
                    hashCode = hashCode * 59 + this.HttpPort.GetHashCode();
                if (this.HttpsPort != null)
                    hashCode = hashCode * 59 + this.HttpsPort.GetHashCode();
                return hashCode;
            }
        }
    }

}
