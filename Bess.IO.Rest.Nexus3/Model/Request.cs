/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// Request
    /// </summary>
    [DataContract]
    public partial class Request :  IEquatable<Request>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Request" /> class.
        /// </summary>
        /// <param name="systemInformation">systemInformation.</param>
        /// <param name="threadDump">threadDump.</param>
        /// <param name="metrics">metrics.</param>
        /// <param name="configuration">configuration.</param>
        /// <param name="security">security.</param>
        /// <param name="log">log.</param>
        /// <param name="taskLog">taskLog.</param>
        /// <param name="auditLog">auditLog.</param>
        /// <param name="jmx">jmx.</param>
        /// <param name="limitFileSizes">limitFileSizes.</param>
        /// <param name="limitZipSize">limitZipSize.</param>
        public Request(bool? systemInformation = default(bool?), bool? threadDump = default(bool?), bool? metrics = default(bool?), bool? configuration = default(bool?), bool? security = default(bool?), bool? log = default(bool?), bool? taskLog = default(bool?), bool? auditLog = default(bool?), bool? jmx = default(bool?), bool? limitFileSizes = default(bool?), bool? limitZipSize = default(bool?))
        {
            this.SystemInformation = systemInformation;
            this.ThreadDump = threadDump;
            this.Metrics = metrics;
            this.Configuration = configuration;
            this.Security = security;
            this.Log = log;
            this.TaskLog = taskLog;
            this.AuditLog = auditLog;
            this.Jmx = jmx;
            this.LimitFileSizes = limitFileSizes;
            this.LimitZipSize = limitZipSize;
        }
        
        /// <summary>
        /// Gets or Sets SystemInformation
        /// </summary>
        [DataMember(Name="systemInformation", EmitDefaultValue=false)]
        public bool? SystemInformation { get; set; }

        /// <summary>
        /// Gets or Sets ThreadDump
        /// </summary>
        [DataMember(Name="threadDump", EmitDefaultValue=false)]
        public bool? ThreadDump { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name="metrics", EmitDefaultValue=false)]
        public bool? Metrics { get; set; }

        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public bool? Configuration { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [DataMember(Name="security", EmitDefaultValue=false)]
        public bool? Security { get; set; }

        /// <summary>
        /// Gets or Sets Log
        /// </summary>
        [DataMember(Name="log", EmitDefaultValue=false)]
        public bool? Log { get; set; }

        /// <summary>
        /// Gets or Sets TaskLog
        /// </summary>
        [DataMember(Name="taskLog", EmitDefaultValue=false)]
        public bool? TaskLog { get; set; }

        /// <summary>
        /// Gets or Sets AuditLog
        /// </summary>
        [DataMember(Name="auditLog", EmitDefaultValue=false)]
        public bool? AuditLog { get; set; }

        /// <summary>
        /// Gets or Sets Jmx
        /// </summary>
        [DataMember(Name="jmx", EmitDefaultValue=false)]
        public bool? Jmx { get; set; }

        /// <summary>
        /// Gets or Sets LimitFileSizes
        /// </summary>
        [DataMember(Name="limitFileSizes", EmitDefaultValue=false)]
        public bool? LimitFileSizes { get; set; }

        /// <summary>
        /// Gets or Sets LimitZipSize
        /// </summary>
        [DataMember(Name="limitZipSize", EmitDefaultValue=false)]
        public bool? LimitZipSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Request {\n");
            sb.Append("  SystemInformation: ").Append(SystemInformation).Append("\n");
            sb.Append("  ThreadDump: ").Append(ThreadDump).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  TaskLog: ").Append(TaskLog).Append("\n");
            sb.Append("  AuditLog: ").Append(AuditLog).Append("\n");
            sb.Append("  Jmx: ").Append(Jmx).Append("\n");
            sb.Append("  LimitFileSizes: ").Append(LimitFileSizes).Append("\n");
            sb.Append("  LimitZipSize: ").Append(LimitZipSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Request);
        }

        /// <summary>
        /// Returns true if Request instances are equal
        /// </summary>
        /// <param name="input">Instance of Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Request input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SystemInformation == input.SystemInformation ||
                    (this.SystemInformation != null &&
                    this.SystemInformation.Equals(input.SystemInformation))
                ) && 
                (
                    this.ThreadDump == input.ThreadDump ||
                    (this.ThreadDump != null &&
                    this.ThreadDump.Equals(input.ThreadDump))
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    (this.Metrics != null &&
                    this.Metrics.Equals(input.Metrics))
                ) && 
                (
                    this.Configuration == input.Configuration ||
                    (this.Configuration != null &&
                    this.Configuration.Equals(input.Configuration))
                ) && 
                (
                    this.Security == input.Security ||
                    (this.Security != null &&
                    this.Security.Equals(input.Security))
                ) && 
                (
                    this.Log == input.Log ||
                    (this.Log != null &&
                    this.Log.Equals(input.Log))
                ) && 
                (
                    this.TaskLog == input.TaskLog ||
                    (this.TaskLog != null &&
                    this.TaskLog.Equals(input.TaskLog))
                ) && 
                (
                    this.AuditLog == input.AuditLog ||
                    (this.AuditLog != null &&
                    this.AuditLog.Equals(input.AuditLog))
                ) && 
                (
                    this.Jmx == input.Jmx ||
                    (this.Jmx != null &&
                    this.Jmx.Equals(input.Jmx))
                ) && 
                (
                    this.LimitFileSizes == input.LimitFileSizes ||
                    (this.LimitFileSizes != null &&
                    this.LimitFileSizes.Equals(input.LimitFileSizes))
                ) && 
                (
                    this.LimitZipSize == input.LimitZipSize ||
                    (this.LimitZipSize != null &&
                    this.LimitZipSize.Equals(input.LimitZipSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SystemInformation != null)
                    hashCode = hashCode * 59 + this.SystemInformation.GetHashCode();
                if (this.ThreadDump != null)
                    hashCode = hashCode * 59 + this.ThreadDump.GetHashCode();
                if (this.Metrics != null)
                    hashCode = hashCode * 59 + this.Metrics.GetHashCode();
                if (this.Configuration != null)
                    hashCode = hashCode * 59 + this.Configuration.GetHashCode();
                if (this.Security != null)
                    hashCode = hashCode * 59 + this.Security.GetHashCode();
                if (this.Log != null)
                    hashCode = hashCode * 59 + this.Log.GetHashCode();
                if (this.TaskLog != null)
                    hashCode = hashCode * 59 + this.TaskLog.GetHashCode();
                if (this.AuditLog != null)
                    hashCode = hashCode * 59 + this.AuditLog.GetHashCode();
                if (this.Jmx != null)
                    hashCode = hashCode * 59 + this.Jmx.GetHashCode();
                if (this.LimitFileSizes != null)
                    hashCode = hashCode * 59 + this.LimitFileSizes.GetHashCode();
                if (this.LimitZipSize != null)
                    hashCode = hashCode * 59 + this.LimitZipSize.GetHashCode();
                return hashCode;
            }
        }
    }

}
