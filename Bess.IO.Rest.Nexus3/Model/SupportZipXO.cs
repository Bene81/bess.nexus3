/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// SupportZipXO
    /// </summary>
    [DataContract]
    public partial class SupportZipXO :  IEquatable<SupportZipXO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportZipXO" /> class.
        /// </summary>
        /// <param name="_file">_file.</param>
        /// <param name="name">name.</param>
        /// <param name="size">size.</param>
        /// <param name="truncated">truncated.</param>
        public SupportZipXO(string _file = default(string), string name = default(string), string size = default(string), bool? truncated = default(bool?))
        {
            this._File = _file;
            this.Name = name;
            this.Size = size;
            this.Truncated = truncated;
        }
        
        /// <summary>
        /// Gets or Sets _File
        /// </summary>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public string _File { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets Truncated
        /// </summary>
        [DataMember(Name="truncated", EmitDefaultValue=false)]
        public bool? Truncated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SupportZipXO {\n");
            sb.Append("  _File: ").Append(_File).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Truncated: ").Append(Truncated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportZipXO);
        }

        /// <summary>
        /// Returns true if SupportZipXO instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportZipXO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportZipXO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._File == input._File ||
                    (this._File != null &&
                    this._File.Equals(input._File))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Truncated == input.Truncated ||
                    (this.Truncated != null &&
                    this.Truncated.Equals(input.Truncated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._File != null)
                    hashCode = hashCode * 59 + this._File.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Truncated != null)
                    hashCode = hashCode * 59 + this.Truncated.GetHashCode();
                return hashCode;
            }
        }
    }

}
