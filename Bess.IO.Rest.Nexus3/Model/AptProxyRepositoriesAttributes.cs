/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// AptProxyRepositoriesAttributes
    /// </summary>
    [DataContract]
    public partial class AptProxyRepositoriesAttributes :  IEquatable<AptProxyRepositoriesAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AptProxyRepositoriesAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AptProxyRepositoriesAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AptProxyRepositoriesAttributes" /> class.
        /// </summary>
        /// <param name="distribution">Distribution to fetch.</param>
        /// <param name="flat">Whether this repository is flat (required).</param>
        public AptProxyRepositoriesAttributes(string distribution = default(string), bool? flat = default(bool?))
        {
            // to ensure "flat" is required (not null)
            if (flat == null)
            {
                throw new InvalidDataException("flat is a required property for AptProxyRepositoriesAttributes and cannot be null");
            }
            else
            {
                this.Flat = flat;
            }
            this.Distribution = distribution;
        }
        
        /// <summary>
        /// Distribution to fetch
        /// </summary>
        /// <value>Distribution to fetch</value>
        [DataMember(Name="distribution", EmitDefaultValue=false)]
        public string Distribution { get; set; }

        /// <summary>
        /// Whether this repository is flat
        /// </summary>
        /// <value>Whether this repository is flat</value>
        [DataMember(Name="flat", EmitDefaultValue=false)]
        public bool? Flat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AptProxyRepositoriesAttributes {\n");
            sb.Append("  Distribution: ").Append(Distribution).Append("\n");
            sb.Append("  Flat: ").Append(Flat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AptProxyRepositoriesAttributes);
        }

        /// <summary>
        /// Returns true if AptProxyRepositoriesAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of AptProxyRepositoriesAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AptProxyRepositoriesAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Distribution == input.Distribution ||
                    (this.Distribution != null &&
                    this.Distribution.Equals(input.Distribution))
                ) && 
                (
                    this.Flat == input.Flat ||
                    (this.Flat != null &&
                    this.Flat.Equals(input.Flat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Distribution != null)
                    hashCode = hashCode * 59 + this.Distribution.GetHashCode();
                if (this.Flat != null)
                    hashCode = hashCode * 59 + this.Flat.GetHashCode();
                return hashCode;
            }
        }
    }

}
