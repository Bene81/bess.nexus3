/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// AbstractApiRepository
    /// </summary>
    [DataContract]
    public partial class AbstractApiRepository :  IEquatable<AbstractApiRepository>
    {
        /// <summary>
        /// Controls if deployments of and updates to artifacts are allowed
        /// </summary>
        /// <value>Controls if deployments of and updates to artifacts are allowed</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Hosted for value: hosted
            /// </summary>
            [EnumMember(Value = "hosted")]
            Hosted = 1,
            
            /// <summary>
            /// Enum Proxy for value: proxy
            /// </summary>
            [EnumMember(Value = "proxy")]
            Proxy = 2,
            
            /// <summary>
            /// Enum Group for value: group
            /// </summary>
            [EnumMember(Value = "group")]
            Group = 3
        }

        /// <summary>
        /// Controls if deployments of and updates to artifacts are allowed
        /// </summary>
        /// <value>Controls if deployments of and updates to artifacts are allowed</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AbstractApiRepository" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AbstractApiRepository() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AbstractApiRepository" /> class.
        /// </summary>
        /// <param name="name">A unique identifier for this repository.</param>
        /// <param name="format">Component format held in this repository.</param>
        /// <param name="type">Controls if deployments of and updates to artifacts are allowed.</param>
        /// <param name="url">URL to the repository.</param>
        /// <param name="online">Whether this repository accepts incoming requests (required).</param>
        public AbstractApiRepository(string name = default(string), string format = default(string), TypeEnum? type = default(TypeEnum?), string url = default(string), bool? online = default(bool?))
        {
            // to ensure "online" is required (not null)
            if (online == null)
            {
                throw new InvalidDataException("online is a required property for AbstractApiRepository and cannot be null");
            }
            else
            {
                this.Online = online;
            }
            this.Name = name;
            this.Format = format;
            this.Type = type;
            this.Url = url;
        }
        
        /// <summary>
        /// A unique identifier for this repository
        /// </summary>
        /// <value>A unique identifier for this repository</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Component format held in this repository
        /// </summary>
        /// <value>Component format held in this repository</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }


        /// <summary>
        /// URL to the repository
        /// </summary>
        /// <value>URL to the repository</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Whether this repository accepts incoming requests
        /// </summary>
        /// <value>Whether this repository accepts incoming requests</value>
        [DataMember(Name="online", EmitDefaultValue=false)]
        public bool? Online { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AbstractApiRepository {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AbstractApiRepository);
        }

        /// <summary>
        /// Returns true if AbstractApiRepository instances are equal
        /// </summary>
        /// <param name="input">Instance of AbstractApiRepository to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AbstractApiRepository input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Online == input.Online ||
                    (this.Online != null &&
                    this.Online.Equals(input.Online))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Online != null)
                    hashCode = hashCode * 59 + this.Online.GetHashCode();
                return hashCode;
            }
        }
    }

}
