/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// S3BlobStoreApiBucketSecurity
    /// </summary>
    [DataContract]
    public partial class S3BlobStoreApiBucketSecurity :  IEquatable<S3BlobStoreApiBucketSecurity>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="S3BlobStoreApiBucketSecurity" /> class.
        /// </summary>
        /// <param name="accessKeyId">An IAM access key ID for granting access to the S3 bucket.</param>
        /// <param name="secretAccessKey">The secret access key associated with the specified IAM access key ID.</param>
        /// <param name="role">An IAM role to assume in order to access the S3 bucket.</param>
        /// <param name="sessionToken">An AWS STS session token associated with temporary security credentials which grant access to the S3 bucket.</param>
        public S3BlobStoreApiBucketSecurity(string accessKeyId = default(string), string secretAccessKey = default(string), string role = default(string), string sessionToken = default(string))
        {
            this.AccessKeyId = accessKeyId;
            this.SecretAccessKey = secretAccessKey;
            this.Role = role;
            this.SessionToken = sessionToken;
        }
        
        /// <summary>
        /// An IAM access key ID for granting access to the S3 bucket
        /// </summary>
        /// <value>An IAM access key ID for granting access to the S3 bucket</value>
        [DataMember(Name="accessKeyId", EmitDefaultValue=false)]
        public string AccessKeyId { get; set; }

        /// <summary>
        /// The secret access key associated with the specified IAM access key ID
        /// </summary>
        /// <value>The secret access key associated with the specified IAM access key ID</value>
        [DataMember(Name="secretAccessKey", EmitDefaultValue=false)]
        public string SecretAccessKey { get; set; }

        /// <summary>
        /// An IAM role to assume in order to access the S3 bucket
        /// </summary>
        /// <value>An IAM role to assume in order to access the S3 bucket</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// An AWS STS session token associated with temporary security credentials which grant access to the S3 bucket
        /// </summary>
        /// <value>An AWS STS session token associated with temporary security credentials which grant access to the S3 bucket</value>
        [DataMember(Name="sessionToken", EmitDefaultValue=false)]
        public string SessionToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class S3BlobStoreApiBucketSecurity {\n");
            sb.Append("  AccessKeyId: ").Append(AccessKeyId).Append("\n");
            sb.Append("  SecretAccessKey: ").Append(SecretAccessKey).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  SessionToken: ").Append(SessionToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as S3BlobStoreApiBucketSecurity);
        }

        /// <summary>
        /// Returns true if S3BlobStoreApiBucketSecurity instances are equal
        /// </summary>
        /// <param name="input">Instance of S3BlobStoreApiBucketSecurity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(S3BlobStoreApiBucketSecurity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessKeyId == input.AccessKeyId ||
                    (this.AccessKeyId != null &&
                    this.AccessKeyId.Equals(input.AccessKeyId))
                ) && 
                (
                    this.SecretAccessKey == input.SecretAccessKey ||
                    (this.SecretAccessKey != null &&
                    this.SecretAccessKey.Equals(input.SecretAccessKey))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.SessionToken == input.SessionToken ||
                    (this.SessionToken != null &&
                    this.SessionToken.Equals(input.SessionToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessKeyId != null)
                    hashCode = hashCode * 59 + this.AccessKeyId.GetHashCode();
                if (this.SecretAccessKey != null)
                    hashCode = hashCode * 59 + this.SecretAccessKey.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.SessionToken != null)
                    hashCode = hashCode * 59 + this.SessionToken.GetHashCode();
                return hashCode;
            }
        }
    }

}
