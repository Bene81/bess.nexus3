/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// StackTraceElement
    /// </summary>
    [DataContract]
    public partial class StackTraceElement :  IEquatable<StackTraceElement>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StackTraceElement" /> class.
        /// </summary>
        /// <param name="methodName">methodName.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="lineNumber">lineNumber.</param>
        /// <param name="className">className.</param>
        /// <param name="nativeMethod">nativeMethod.</param>
        public StackTraceElement(string methodName = default(string), string fileName = default(string), int? lineNumber = default(int?), string className = default(string), bool? nativeMethod = default(bool?))
        {
            this.MethodName = methodName;
            this.FileName = fileName;
            this.LineNumber = lineNumber;
            this.ClassName = className;
            this.NativeMethod = nativeMethod;
        }
        
        /// <summary>
        /// Gets or Sets MethodName
        /// </summary>
        [DataMember(Name="methodName", EmitDefaultValue=false)]
        public string MethodName { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public int? LineNumber { get; set; }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [DataMember(Name="className", EmitDefaultValue=false)]
        public string ClassName { get; set; }

        /// <summary>
        /// Gets or Sets NativeMethod
        /// </summary>
        [DataMember(Name="nativeMethod", EmitDefaultValue=false)]
        public bool? NativeMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StackTraceElement {\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  NativeMethod: ").Append(NativeMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StackTraceElement);
        }

        /// <summary>
        /// Returns true if StackTraceElement instances are equal
        /// </summary>
        /// <param name="input">Instance of StackTraceElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StackTraceElement input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MethodName == input.MethodName ||
                    (this.MethodName != null &&
                    this.MethodName.Equals(input.MethodName))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                ) && 
                (
                    this.ClassName == input.ClassName ||
                    (this.ClassName != null &&
                    this.ClassName.Equals(input.ClassName))
                ) && 
                (
                    this.NativeMethod == input.NativeMethod ||
                    (this.NativeMethod != null &&
                    this.NativeMethod.Equals(input.NativeMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MethodName != null)
                    hashCode = hashCode * 59 + this.MethodName.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                if (this.ClassName != null)
                    hashCode = hashCode * 59 + this.ClassName.GetHashCode();
                if (this.NativeMethod != null)
                    hashCode = hashCode * 59 + this.NativeMethod.GetHashCode();
                return hashCode;
            }
        }
    }

}
