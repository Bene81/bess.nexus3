/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// TaskXO
    /// </summary>
    [DataContract]
    public partial class TaskXO :  IEquatable<TaskXO>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskXO" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="message">message.</param>
        /// <param name="currentState">currentState.</param>
        /// <param name="lastRunResult">lastRunResult.</param>
        /// <param name="nextRun">nextRun.</param>
        /// <param name="lastRun">lastRun.</param>
        public TaskXO(string id = default(string), string name = default(string), string type = default(string), string message = default(string), string currentState = default(string), string lastRunResult = default(string), DateTime? nextRun = default(DateTime?), DateTime? lastRun = default(DateTime?))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.Message = message;
            this.CurrentState = currentState;
            this.LastRunResult = lastRunResult;
            this.NextRun = nextRun;
            this.LastRun = lastRun;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets CurrentState
        /// </summary>
        [DataMember(Name="currentState", EmitDefaultValue=false)]
        public string CurrentState { get; set; }

        /// <summary>
        /// Gets or Sets LastRunResult
        /// </summary>
        [DataMember(Name="lastRunResult", EmitDefaultValue=false)]
        public string LastRunResult { get; set; }

        /// <summary>
        /// Gets or Sets NextRun
        /// </summary>
        [DataMember(Name="nextRun", EmitDefaultValue=false)]
        public DateTime? NextRun { get; set; }

        /// <summary>
        /// Gets or Sets LastRun
        /// </summary>
        [DataMember(Name="lastRun", EmitDefaultValue=false)]
        public DateTime? LastRun { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskXO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  CurrentState: ").Append(CurrentState).Append("\n");
            sb.Append("  LastRunResult: ").Append(LastRunResult).Append("\n");
            sb.Append("  NextRun: ").Append(NextRun).Append("\n");
            sb.Append("  LastRun: ").Append(LastRun).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskXO);
        }

        /// <summary>
        /// Returns true if TaskXO instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskXO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskXO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.CurrentState == input.CurrentState ||
                    (this.CurrentState != null &&
                    this.CurrentState.Equals(input.CurrentState))
                ) && 
                (
                    this.LastRunResult == input.LastRunResult ||
                    (this.LastRunResult != null &&
                    this.LastRunResult.Equals(input.LastRunResult))
                ) && 
                (
                    this.NextRun == input.NextRun ||
                    (this.NextRun != null &&
                    this.NextRun.Equals(input.NextRun))
                ) && 
                (
                    this.LastRun == input.LastRun ||
                    (this.LastRun != null &&
                    this.LastRun.Equals(input.LastRun))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.CurrentState != null)
                    hashCode = hashCode * 59 + this.CurrentState.GetHashCode();
                if (this.LastRunResult != null)
                    hashCode = hashCode * 59 + this.LastRunResult.GetHashCode();
                if (this.NextRun != null)
                    hashCode = hashCode * 59 + this.NextRun.GetHashCode();
                if (this.LastRun != null)
                    hashCode = hashCode * 59 + this.LastRun.GetHashCode();
                return hashCode;
            }
        }
    }

}
