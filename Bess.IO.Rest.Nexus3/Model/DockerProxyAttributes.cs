/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// DockerProxyAttributes
    /// </summary>
    [DataContract]
    public partial class DockerProxyAttributes :  IEquatable<DockerProxyAttributes>
    {
        /// <summary>
        /// Type of Docker Index
        /// </summary>
        /// <value>Type of Docker Index</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IndexTypeEnum
        {
            
            /// <summary>
            /// Enum HUB for value: HUB
            /// </summary>
            [EnumMember(Value = "HUB")]
            HUB = 1,
            
            /// <summary>
            /// Enum REGISTRY for value: REGISTRY
            /// </summary>
            [EnumMember(Value = "REGISTRY")]
            REGISTRY = 2,
            
            /// <summary>
            /// Enum CUSTOM for value: CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOM = 3
        }

        /// <summary>
        /// Type of Docker Index
        /// </summary>
        /// <value>Type of Docker Index</value>
        [DataMember(Name="indexType", EmitDefaultValue=false)]
        public IndexTypeEnum? IndexType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DockerProxyAttributes" /> class.
        /// </summary>
        /// <param name="indexType">Type of Docker Index.</param>
        /// <param name="indexUrl">Url of Docker Index to use.</param>
        public DockerProxyAttributes(IndexTypeEnum? indexType = default(IndexTypeEnum?), string indexUrl = default(string))
        {
            this.IndexType = indexType;
            this.IndexUrl = indexUrl;
        }
        

        /// <summary>
        /// Url of Docker Index to use
        /// </summary>
        /// <value>Url of Docker Index to use</value>
        [DataMember(Name="indexUrl", EmitDefaultValue=false)]
        public string IndexUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DockerProxyAttributes {\n");
            sb.Append("  IndexType: ").Append(IndexType).Append("\n");
            sb.Append("  IndexUrl: ").Append(IndexUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DockerProxyAttributes);
        }

        /// <summary>
        /// Returns true if DockerProxyAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of DockerProxyAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DockerProxyAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IndexType == input.IndexType ||
                    (this.IndexType != null &&
                    this.IndexType.Equals(input.IndexType))
                ) && 
                (
                    this.IndexUrl == input.IndexUrl ||
                    (this.IndexUrl != null &&
                    this.IndexUrl.Equals(input.IndexUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IndexType != null)
                    hashCode = hashCode * 59 + this.IndexType.GetHashCode();
                if (this.IndexUrl != null)
                    hashCode = hashCode * 59 + this.IndexUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}
