/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// YumAttributes
    /// </summary>
    [DataContract]
    public partial class YumAttributes :  IEquatable<YumAttributes>
    {
        /// <summary>
        /// Validate that all paths are RPMs or yum metadata
        /// </summary>
        /// <value>Validate that all paths are RPMs or yum metadata</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeployPolicyEnum
        {
            
            /// <summary>
            /// Enum PERMISSIVE for value: PERMISSIVE
            /// </summary>
            [EnumMember(Value = "PERMISSIVE")]
            PERMISSIVE = 1,
            
            /// <summary>
            /// Enum STRICT for value: STRICT
            /// </summary>
            [EnumMember(Value = "STRICT")]
            STRICT = 2
        }

        /// <summary>
        /// Validate that all paths are RPMs or yum metadata
        /// </summary>
        /// <value>Validate that all paths are RPMs or yum metadata</value>
        [DataMember(Name="deployPolicy", EmitDefaultValue=false)]
        public DeployPolicyEnum? DeployPolicy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="YumAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected YumAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="YumAttributes" /> class.
        /// </summary>
        /// <param name="repodataDepth">Specifies the repository depth where repodata folder(s) are created (required).</param>
        /// <param name="deployPolicy">Validate that all paths are RPMs or yum metadata.</param>
        public YumAttributes(int? repodataDepth = default(int?), DeployPolicyEnum? deployPolicy = default(DeployPolicyEnum?))
        {
            // to ensure "repodataDepth" is required (not null)
            if (repodataDepth == null)
            {
                throw new InvalidDataException("repodataDepth is a required property for YumAttributes and cannot be null");
            }
            else
            {
                this.RepodataDepth = repodataDepth;
            }
            this.DeployPolicy = deployPolicy;
        }
        
        /// <summary>
        /// Specifies the repository depth where repodata folder(s) are created
        /// </summary>
        /// <value>Specifies the repository depth where repodata folder(s) are created</value>
        [DataMember(Name="repodataDepth", EmitDefaultValue=false)]
        public int? RepodataDepth { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class YumAttributes {\n");
            sb.Append("  RepodataDepth: ").Append(RepodataDepth).Append("\n");
            sb.Append("  DeployPolicy: ").Append(DeployPolicy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as YumAttributes);
        }

        /// <summary>
        /// Returns true if YumAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of YumAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(YumAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RepodataDepth == input.RepodataDepth ||
                    (this.RepodataDepth != null &&
                    this.RepodataDepth.Equals(input.RepodataDepth))
                ) && 
                (
                    this.DeployPolicy == input.DeployPolicy ||
                    (this.DeployPolicy != null &&
                    this.DeployPolicy.Equals(input.DeployPolicy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RepodataDepth != null)
                    hashCode = hashCode * 59 + this.RepodataDepth.GetHashCode();
                if (this.DeployPolicy != null)
                    hashCode = hashCode * 59 + this.DeployPolicy.GetHashCode();
                return hashCode;
            }
        }
    }

}
