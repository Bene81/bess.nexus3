/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.30.1-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Bess.IO.Rest.Nexus3.Client.SwaggerDateConverter;

namespace Bess.IO.Rest.Nexus3.Model
{
    /// <summary>
    /// RoutingRuleXO
    /// </summary>
    [DataContract]
    public partial class RoutingRuleXO :  IEquatable<RoutingRuleXO>
    {
        /// <summary>
        /// Determines what should be done with requests when their path matches any of the matchers
        /// </summary>
        /// <value>Determines what should be done with requests when their path matches any of the matchers</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            
            /// <summary>
            /// Enum BLOCK for value: BLOCK
            /// </summary>
            [EnumMember(Value = "BLOCK")]
            BLOCK = 1,
            
            /// <summary>
            /// Enum ALLOW for value: ALLOW
            /// </summary>
            [EnumMember(Value = "ALLOW")]
            ALLOW = 2
        }

        /// <summary>
        /// Determines what should be done with requests when their path matches any of the matchers
        /// </summary>
        /// <value>Determines what should be done with requests when their path matches any of the matchers</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RoutingRuleXO" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="mode">Determines what should be done with requests when their path matches any of the matchers.</param>
        /// <param name="matchers">Regular expressions used to identify request paths that are allowed or blocked (depending on mode).</param>
        public RoutingRuleXO(string name = default(string), string description = default(string), ModeEnum? mode = default(ModeEnum?), List<string> matchers = default(List<string>))
        {
            this.Name = name;
            this.Description = description;
            this.Mode = mode;
            this.Matchers = matchers;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// Regular expressions used to identify request paths that are allowed or blocked (depending on mode)
        /// </summary>
        /// <value>Regular expressions used to identify request paths that are allowed or blocked (depending on mode)</value>
        [DataMember(Name="matchers", EmitDefaultValue=false)]
        public List<string> Matchers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RoutingRuleXO {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Matchers: ").Append(Matchers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RoutingRuleXO);
        }

        /// <summary>
        /// Returns true if RoutingRuleXO instances are equal
        /// </summary>
        /// <param name="input">Instance of RoutingRuleXO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoutingRuleXO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Matchers == input.Matchers ||
                    this.Matchers != null &&
                    this.Matchers.SequenceEqual(input.Matchers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Matchers != null)
                    hashCode = hashCode * 59 + this.Matchers.GetHashCode();
                return hashCode;
            }
        }
    }

}
